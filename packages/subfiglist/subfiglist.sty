%% subfiglist.sty
%% Copyright 2017 Manuel Nutz
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008/05/04 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Manuel Nutz.
%
% This work consists of the files subfiglist.dtx and subfiglist.ins
% and the derived file subfiglist.sty.
%
%
%
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\RequirePackage{expl3}[2015/12/20]% needs v6326 or newer
\ProvidesExplPackage{subfiglist}{2015/03/22}{1.0}{labeled subfigures}

\RequirePackage{l3sort}[2013/12/14]     % needs v4623 or newer
\RequirePackage{l3keys2e}[2014/06/10]   % needs v5105 or newer
\RequirePackage{xparse}[2014/06/10]     % needs v5105 or newer
\RequirePackage{import}[2009/03/23]     % needs v5.1  or newer
\RequirePackage{xcolor}[2007/01/21]     % needs v2.11 or newer
\RequirePackage{graphicx}[2014/04/25]   % needs v1.0g or newer
\RequirePackage{caption}[2013/05/02]    % needs v3.3  or newer
\RequirePackage{caption3}[2013/05/01]   % needs v1.6  or newer
\RequirePackage{subcaption}[2013/02/03] % needs v1.1  or newer



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Define package variables   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\dim_new:N  \subfiglistlineheight

\dim_new:N  \subfiglist_canvas_height_dim
\dim_new:N  \subfiglist_canvas_width_dim

\dim_new:N  \subfiglist_canvas_top_dim
\dim_new:N  \subfiglist_canvas_bot_dim
\dim_new:N  \subfiglist_canvas_left_dim
\dim_new:N  \subfiglist_canvas_right_dim

\dim_new:N  \subfiglist_sub_block_line_hoff_dim
\dim_new:N  \subfiglist_sub_block_line_voff_dim
\dim_new:N  \subfiglist_sub_block_hoff_dim
\dim_new:N  \subfiglist_sub_block_voff_dim

\dim_new:N  \subfiglist_sum_hoff_dim
\dim_new:N  \subfiglist_sum_voff_over_ratio_dim
\dim_new:N  \subfiglist_newline_correction_dim
\dim_new:N  \subfiglist_tmpa_dim
\dim_new:N  \subfiglist_tmpb_dim

\dim_new:N  \subfiglist_effective_hoff_dim
\dim_new:N  \subfiglist_effective_voff_dim
\dim_new:N  \subfiglist_line_height_dim
\dim_new:N  \subfiglist_column_width_dim

\tl_new:N   \subfiglist_test_tl
\tl_new:N   \subfiglist_head_tl
\tl_new:N   \subfiglist_tail_tl

\tl_new:N   \subfiglist_parsed_spec_tl
\tl_new:N   \subfiglist_tokenized_spec_tl
\tl_new:N   \subfiglist_dimensioned_spec_tl
\tl_new:N   \subfiglist_spec_current_line_tl

\tl_new:N   \subfiglist_canvas_top_tl
\tl_new:N   \subfiglist_canvas_bot_tl
\tl_new:N   \subfiglist_canvas_left_tl
\tl_new:N   \subfiglist_canvas_right_tl

\tl_new:N   \subfiglist_file_nums_tl
\tl_new:N   \subfiglist_file_names_tl

\tl_new:N   \subfiglist_dummy_file_nums_tl
\tl_new:N   \subfiglist_dummy_file_names_tl
\tl_new:N   \subfiglist_dummy_file_frame_tl

\tl_new:N   \subfiglist_dummy_nums_tl
\tl_new:N   \subfiglist_dummy_ratio_tl
\tl_new:N   \subfiglist_dummy_frame_tl

\tl_new:N   \subfiglist_label_nums_tl
\tl_new:N   \subfiglist_label_hooks_tl
\tl_new:N   \subfiglist_label_hpos_tl
\tl_new:N   \subfiglist_label_vpos_tl
\tl_new:N   \subfiglist_label_hpos_default_tl
\tl_new:N   \subfiglist_label_vpos_default_tl
\tl_new:N   \subfiglist_label_hoff_tl
\tl_new:N   \subfiglist_label_voff_tl
\tl_new:N   \subfiglist_label_xshift_tl
\tl_new:N   \subfiglist_label_yshift_tl
\tl_new:N   \subfiglist_label_color_list_tl
\tl_new:N   \subfiglist_label_background_list_tl

\tl_new:N   \subfiglist_overlay_nums_tl
\tl_new:N   \subfiglist_overlay_content_tl

\tl_new:N   \subfiglist_objects_pos_tl
\tl_new:N   \subfiglist_objects_hoff_tl
\tl_new:N   \subfiglist_objects_voff_tl
\tl_new:N   \subfiglist_objects_ratio_tl
\tl_new:N   \subfiglist_objects_cs_tl
\tl_new:N   \subfiglist_objects_opt_arg_nl_tl
\tl_new:N   \subfiglist_objects_sub_blocks_tl
\tl_new:N   \subfiglist_objects_width_tl
\tl_new:N   \subfiglist_option_unknown_message_name_tl

\tl_new:N   \subfiglist_csname_tl

\tl_new:N   \subfiglist_tmpa_tl
\tl_new:N   \subfiglist_tmpb_tl

\seq_new:N  \subfiglist_spec_str_seq
\seq_new:N  \subfiglist_spec_tokens_seq
\seq_new:N  \subfiglist_tmp_seq

\seq_new:N   \subfiglist_identifier_nums_seq
\seq_new:N   \subfiglist_identifier_nums_sorted_seq
\seq_new:N   \subfiglist_canvas_nums_seq
\seq_new:N   \subfiglist_canvas_nums_sorted_seq
\seq_new:N   \subfiglist_label_nums_seq
\seq_new:N   \subfiglist_label_nums_sorted_seq
\seq_new:N   \subfiglist_overlay_nums_seq
\seq_new:N   \subfiglist_overlay_nums_sorted_seq

\prop_new:N \subfiglist_canvas_prop
\prop_new:N \subfiglist_label_prop
\prop_new:N \subfiglist_overlay_prop
\prop_new:N \subfiglist_tmp_prop

\int_new:N  \subfiglist_exit_count_int
\int_new:N  \subfiglist_identifier_count_int
\int_new:N  \subfiglist_canvas_count_int
\int_new:N  \subfiglist_tl_if_eq_charcode_int
\int_new:N  \subfiglist_keyval_choice_first_int
\int_new:N  \subfiglist_tmp_int

\int_new:N  \subfiglist_label_hpos_int
\int_new:N  \subfiglist_label_vpos_int

\fp_new:N   \subfiglist_sub_block_line_ratio_fp
\fp_new:N   \subfiglist_sub_block_ratio_fp
\fp_new:N   \subfiglist_sum_ratio_over_ratio_fp
\fp_new:N   \subfiglist_tmp_fp
\fp_new:N   \subfiglist_effective_canvas_ratio_fp

\bool_new:N \subfiglist_env_store_images_bool
\bool_new:N \subfiglist_after_char_at_bool
\bool_new:N \subfiglist_after_char_br_bool
\bool_new:N \subfiglist_after_char_nl_bool
\bool_new:N \subfiglist_space_needed_bool
\bool_new:N \subfiglist_first_bool
\bool_new:N \subfiglist_hmode_bool
\bool_new:N \subfiglist_tl_if_eq_charcode_bool
\bool_new:N \subfiglist_tmp_bool

\box_new:N  \subfiglist_tmp_box



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Generate variants of some commands   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Functions for expanding tokens TWICE
\cs_new:Npn \subfiglist_exp_args:Nt #1 #2
{
  \exp_args:NNo \exp_args:No #1 { #2 }
}

\cs_generate_variant:Nn \subfiglist_exp_args:Nt { c }

\cs_new:Npn \subfiglist_exp_args:NNt #1 #2 #3
{
  \exp_args:NNNo \exp_args:NNo #1 #2 { #3 }
}

\cs_generate_variant:Nn \subfiglist_exp_args:NNt { c }

\cs_new:Npn \subfiglist_exp_args:Nnt #1 #2 #3
{
  \exp_args:NNno \exp_args:Nno #1 { #2 } { #3 }
}

\cs_generate_variant:Nn \subfiglist_exp_args:Nnt { c }

\cs_new:Npn \subfiglist_exp_args:Ntt #1 #2 #3
{
  \exp_args:NNoo \exp_args:Noo #1 { #2 } { #3 }
}

\cs_generate_variant:Nn \subfiglist_exp_args:Ntt { c }

\cs_generate_variant:Nn \dim_set:Nn                { Nf }
\cs_generate_variant:Nn \dim_add:Nn                { Nf }
\cs_generate_variant:Nn \dim_sub:Nn                { Nf }
\cs_generate_variant:Nn \dim_set:Nn                { NV }
\cs_generate_variant:Nn \dim_add:Nn                { NV }
\cs_generate_variant:Nn \dim_sub:Nn                { NV }
\cs_generate_variant:Nn \fp_set:Nn                 { Nf }
\cs_generate_variant:Nn \fp_add:Nn                 { Nf }
\cs_generate_variant:Nn \fp_sub:Nn                 { Nf }
\cs_generate_variant:Nn \fp_set:Nn                 { NV }
\cs_generate_variant:Nn \fp_add:Nn                 { NV }
\cs_generate_variant:Nn \fp_sub:Nn                 { NV }
\cs_generate_variant:Nn \tl_put_right:Nn           { Nf }
\cs_generate_variant:Nn \tl_if_single_p:n          { V }
\cs_generate_variant:Nn \tl_if_blank_p:n           { V }
\cs_generate_variant:Nn \tl_if_empty:nT            { v }
\cs_generate_variant:Nn \tl_if_in:nnTF             { nx }
\cs_generate_variant:Nn \msg_error:nnn             { nnf }
\cs_generate_variant:Nn \msg_error:nnnn            { nnnf }
\cs_generate_variant:Nn \msg_error:nnnn            { nnfn }
\cs_generate_variant:Nn \msg_error:nnnn            { nnff }
\cs_generate_variant:Nn \msg_error:nnnnn           { nnnfn }
\cs_generate_variant:Nn \msg_error:nnnnn           { nnnfV }
\cs_generate_variant:Nn \msg_error:nnn             { nnV }
\cs_generate_variant:Nn \msg_error:nnnn            { nnnV }
\cs_generate_variant:Nn \msg_error:nnnn            { nnVn }
\cs_generate_variant:Nn \msg_error:nnnn            { nnVV }
\cs_generate_variant:Nn \msg_error:nnnn            { nnVx }
\cs_generate_variant:Nn \msg_error:nnn             { nVV }
\cs_generate_variant:Nn \msg_error:nnnn            { nVnV }
\cs_generate_variant:Nn \msg_error:nnnn            { nVVn }
\cs_generate_variant:Nn \msg_error:nnnn            { nVVV }
\cs_generate_variant:Nn \prg_new_conditional:Npnn  { cpnn }
\cs_generate_variant:Nn \cs_generate_variant:Nn    { cn }
\cs_generate_variant:Nn \str_if_eq_p:nn            { nf }
\cs_generate_variant:Nn \char_generate:nn          { nV }
\cs_generate_variant:Nn \seq_set_split:Nnn         { Nx }
\cs_generate_variant:Nn \token_if_eq_charcode_p:NN { NV }
\cs_generate_variant:Nn \token_if_eq_charcode:NNTF { NV }
\cs_generate_variant:Nn \group_insert_after:N      { c }


\cs_new:Npn \token_if_eq_charcode:NtTF #1 #2 #3 #4
{
  \subfiglist_exp_args:NNt \token_if_eq_charcode:NNTF #1 { #2 } { #3 } { #4 }
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Define messages   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

\msg_new:nnn { subfiglist } { internal~error }
  { Internal~error:~#1 }

\msg_new:nnn { subfiglist } { parser~error }
  { Error~while~parsing~the~argument~of~`subfiglist'~environment:~Unexpected~token~`#1' }

\msg_new:nnn { subfiglist } { runaway~optional~argument }
  { Missing~closing~square~bracket~`]'~of~optional~argument~inside~argument~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { missing~separator }
  { Expected~specification~of~a~separator~after~token~`@'~in~argument~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { missing~identifier }
  { Canvas~no.~#1~missing~in~argument~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { missing~canvas }
  { Canvas~no.~#1~missing~in~body~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { double~identifier }
  { Canvas~no.~#1~appears~twice~in~argument~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { double~canvas }
  { Canvas~no.~#1~appears~twice~in~body~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { double~label }
  { Label~no.~#1~appears~twice~in~body~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { double~overlay }
  { Overlay~no.~#1~appears~twice~in~body~of~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { too~many~identifiers }
{
  You~have~specified~#1~identifieres~in~argument~of~`subfiglist'~environment,~
  but~only~#2~canvases~are~given~in~body~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { too~many~canvases }
{
  You~have~specified~canvas~no.~#1~in~body~of~`subfiglist'~environment,~
  but~only~#2~identifieres~are~given~in~argument~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { too~many~labels }
{
  You~have~specified~label~no.~#1~in~body~of~`subfiglist'~environment,~
  but~only~#2~identifieres~are~given~in~argument~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { too~many~overlays }
{
  You~have~specified~overlay~no.~#1~in~body~of~`subfiglist'~environment,~
  but~only~#2~identifieres~are~given~in~argument~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { missing~number }
  { #1~argument~of~command~`#2'~needs~to~be~a~positive~integer,~found~`#3'~instead. }

\msg_new:nnn { subfiglist } { missing~float }
  { #1~argument~of~command~`#2'~needs~to~be~a~positive~floating~point~expression,~found~`#3'~instead. }

\msg_new:nnn { subfiglist } { malformed~argument }
  { Malformed~argument:~expected~#1~but~found~#2~instead. }

\msg_new:nnn { subfiglist } { unexpected~command }
  { Unexpected~command~`#1'.~Command~#1~needs~to~be~used~within~`subfiglist'~environment. }

\msg_new:nnn { subfiglist } { undefined~command~sequence }
  { The~command~sequence~`#1'~was~used,~but~never~defined. }

\msg_new:nnn { subfiglist } { option~unknown }
  { Unknown~key~`#1'~in~optional~argument~of~#2. }

\msg_new:nnn { subfiglist } { subfiglistsetup~option~unknown }
  { Unknown~key~`#1'~in~argument~of~`\token_to_str:c { subfiglistsetup }'. }

\msg_new:nnn { subfiglist } { option~invalid }
  { Option~`caption'~invalid~after~\@backslashchar begin{document}. }

\msg_new:nnn { subfiglist } { wrong~identifier~order }
{
  Package~subfiglist~Warning:~
  The~canvas~numbers~in~the~argument~of~`subfiglist'~environment~are~given~in~non-ascending~order.
}

\msg_new:nnn { subfiglist } { wrong~canvas~order }
{
  Package~subfiglist~Warning:~
  The~canvas~numbers~in~the~body~of~`subfiglist'~environment~are~given~in~non-ascending~order.
}

\msg_new:nnn { subfiglist } { wrong~label~order }
{
  Package~subfiglist~Warning:~
  The~label~numbers~in~the~body~of~`subfiglist'~environment~are~given~in~non-ascending~order.
}

\msg_new:nnn { subfiglist } { mismatching~canvas~order }
{
  Package~subfiglist~Warning:~
  The~canvas~numbers~in~the~argument~of~`subfiglist'~environment~are~given~
  in~a~different~order~than~the~canvas~numbers~in~the~body~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { mismatching~label~order }
{
  Package~subfiglist~Warning:~
  The~canvas~numbers~in~the~argument~of~`subfiglist'~environment~are~given~
  in~a~different~order~than~the~label~numbers~in~the~body~of~`subfiglist'~environment.
}

\msg_new:nnn { subfiglist } { mismatching~overlay~order }
{
  Package~subfiglist~Warning:~
  The~canvas~numbers~in~the~argument~of~`subfiglist'~environment~are~given~
  in~a~different~order~than~the~overlay~numbers~in~the~body~of~`subfiglist'~environment.
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Define and initialize key-value pairs   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Keys as options for package loading
\keys_define:nn { subfiglist }
{
  % Tweak caption package for generation of labels?
  tweak-caption-package.bool_set:N          = \subfiglist_tweak_caption_package_bool,
  tweak-caption-package.default:n           = true,
  
  % Width of environment
  environment-width.dim_set:N               = \subfiglist_env_width_document_default_dim,
  environment-width.value_required:n        = true,
  ew.meta:n                                 = { environment-width = #1 },
  ew.value_required:n                       = true,
  
  % Use \hspace* to output space?
  environment-use-hspace.bool_set:N        = \subfiglist_env_use_hspace_document_default_bool,
  environment-use-hspace.default:n         = true,
  euh.meta:n                               = { environment-use-hspace = #1 },
  euh.default:n                            = true,
  
  % Space between canvases
  canvas-space.dim_set:N                    = \subfiglist_canvas_space_document_default_dim,
  canvas-space.value_required:n             = true,
  cs.meta:n                                 = { canvas-space = #1 },
  cs.value_required:n                       = true,
  
  % Space above canvas
  canvas-top.dim_set:N                     = \subfiglist_canvas_top_document_default_dim,
  canvas-top.value_required:n              = true,
  ct.meta:n                                = { canvas-top = #1 },
  ct.value_required:n                      = true,
  
  % Space below canvas
  canvas-bottom.dim_set:N                  = \subfiglist_canvas_bot_document_default_dim,
  canvas-bottom.value_required:n           = true,
  cb.meta:n                                = { canvas-bottom = #1 },
  cb.value_required:n                      = true,
  
  % Space left of canvas
  canvas-left.dim_set:N                    = \subfiglist_canvas_left_document_default_dim,
  canvas-left.value_required:n             = true,
  cl.meta:n                                = { canvas-left = #1 },
  cl.value_required:n                      = true,
  
  % Space right of canvas
  canvas-right.dim_set:N                   = \subfiglist_canvas_right_document_default_dim,
  canvas-right.value_required:n            = true,
  cr.meta:n                                = { canvas-right = #1 },
  cr.value_required:n                      = true,
  
  % Canvas margin
  canvas-margin.meta:n                     = { canvas-top = #1, 
                                               canvas-bottom = #1, 
                                               canvas-left = #1,
                                               canvas-right = #1 },
  canvas-margin.value_required:n           = true,
  cm.meta:n                                = { canvas-margin = #1 },
  cm.value_required:n                      = true,
  
  % Canvas frame color
  canvas-frame-color.tl_set:N              = \subfiglist_canvas_frame_color_document_default_tl,
  canvas-frame-color.value_required:n      = true,
  canvas-frame-colour.meta:n               = { canvas-frame-color = #1 },
  canvas-frame-colour.value_required:n     = true,
  cfc.meta:n                               = { canvas-frame-color = #1 },
  cfc.value_required:n                     = true,
  
  % Canvas frame border width
  canvas-frame-width.dim_set:N             = \subfiglist_canvas_frame_width_document_default_dim,
  canvas-frame-width.value_required:n      = true,
  cfw.meta:n                               = { canvas-frame-width = #1 },
  cfw.value_required:n                     = true,
  
  % Canvas frame top separation
  canvas-frame-top.dim_set:N               = \subfiglist_canvas_frame_top_document_default_dim,
  canvas-frame-top.value_required:n        = true,
  cft.meta:n                               = { canvas-frame-top = #1 },
  cft.value_required:n                     = true,
  
  % Canvas frame bottom separation
  canvas-frame-bottom.dim_set:N            = \subfiglist_canvas_frame_bottom_document_default_dim,
  canvas-frame-bottom.value_required:n     = true,
  cfb.meta:n                               = { canvas-frame-bottom = #1 },
  cfb.value_required:n                     = true,
  
  % Canvas frame left separation
  canvas-frame-left.dim_set:N              = \subfiglist_canvas_frame_left_document_default_dim,
  canvas-frame-left.value_required:n       = true,
  cfl.meta:n                               = { canvas-frame-left = #1 },
  cfl.value_required:n                     = true,
  
  % Canvas frame right separation
  canvas-frame-right.dim_set:N             = \subfiglist_canvas_frame_right_document_default_dim,
  canvas-frame-right.value_required:n      = true,
  cfr.meta:n                               = { canvas-frame-right = #1 },
  cfr.value_required:n                     = true,
  
  % Canvas frame padding
  canvas-frame-padding.meta:n              = { canvas-frame-top = #1, 
                                               canvas-frame-bottom = #1, 
                                               canvas-frame-left = #1,
                                               canvas-frame-right = #1 },
  canvas-frame-padding.value_required:n    = true,
  cfp.meta:n                               = { canvas-frame-padding = #1 },
  cfp.value_required:n                     = true,
  
  % Horizontal positioning of label (left, center, right)
  label-hpos.choice:,
  label-hpos.choices:nn                    = { l, c, r }
    { \tl_set_eq:NN \subfiglist_label_hpos_document_default_tl \l_keys_choice_tl },
  label-hpos.value_required:n              = true,
  lh.choice:,
  lh.choices:nn                            = { l, c, r }
    { \tl_set_eq:NN \subfiglist_label_hpos_document_default_tl \l_keys_choice_tl },
  lh.value_required:n                      = true,
  
  % Vertical positioning of label (top, center, bottom)
  label-vpos.choice:,
  label-vpos.choices:nn                    = { t, c, b }
    { \tl_set_eq:NN \subfiglist_label_vpos_document_default_tl \l_keys_choice_tl },
  label-vpos.value_required:n              = true,
  lv.choice:,
  lv.choices:nn                            = { t, c, b }
    { \tl_set_eq:NN \subfiglist_label_vpos_document_default_tl \l_keys_choice_tl },
  lv.value_required:n                      = true,
  
  % Horizontal shift of label
  label-xshift.dim_set:N                   = \subfiglist_label_xshift_document_default_dim,
  label-xshift.value_required:n            = true,
  lx.meta:n                                = { label-xshift = #1 },
  lx.value_required:n                      = true,
  
  % Vertical shift of label
  label-yshift.dim_set:N                   = \subfiglist_label_yshift_document_default_dim,
  label-yshift.value_required:n            = true,
  ly.meta:n                                = { label-yshift = #1 },
  ly.value_required:n                      = true,
  
  % Label color
  label-color.tl_set:N                     = \subfiglist_label_color_document_default_tl,
  label-color.value_required:n             = true,
  label-colour.meta:n                      = { label-color = #1 },
  label-colour.value_required:n            = true,
  lc.meta:n                                = { label-color = #1 },
  lc.value_required:n                      = true,
  
  % Label background
  label-background.tl_set:N                = \subfiglist_label_background_document_default_tl,
  label-background.value_required:n        = true,
  lb.meta:n                                = { label-background = #1 },
  lb.value_required:n                      = true,
  
  % Error catching
  unknown.code:n                           =
  {
    \msg_error:nnVn { subfiglist } \subfiglist_option_unknown_message_name_tl
      \l_keys_key_tl { subfiglist~package }
  }
}

% Initialize and set keys
\tl_set:Nn \subfiglist_option_unknown_message_name_tl { option~unknown }
\keys_set:nn { subfiglist }
{
  tweak-caption-package  = true,
  environment-width      = \textwidth,
  environment-use-hspace = false,
  canvas-space           = 1ex,
  canvas-top             = 0pt,
  canvas-bottom          = 0pt,
  canvas-left            = 0pt,
  canvas-right           = 0pt,
  canvas-frame-color     = none,
  canvas-frame-width     = 2pt,
  canvas-frame-top       = 0pt,
  canvas-frame-bottom    = 0pt,
  canvas-frame-left      = 0pt,
  canvas-frame-right     = 0pt,
  label-hpos             = l,
  label-vpos             = t,
  label-xshift           = 0.5ex,
  label-yshift           = 0.5ex,
  label-color            = .,
  label-background       = none
}
\ProcessKeysOptions { subfiglist }

% Command for explicit manipulation of keys
\NewDocumentCommand \subfiglistsetup { m }
{
  \tl_set:Nn \subfiglist_option_unknown_message_name_tl { subfiglistsetup~option~unknown }
  \keys_set:nn { subfiglist } { #1 }
  \tl_set:Nn \subfiglist_option_unknown_message_name_tl { option~unknown }
}

% Key to find out what number the number of the first choice
% in a key set is. Documentation and current implementation
% differ, so better let's check.
\keys_define:nn { subfiglisttest }
{
  test.choice:,
  test.choices:nn       = { first, second }
    { \int_gset_eq:NN \subfiglist_keyval_choice_first_int \l_keys_choice_int },
  test.value_required:n = true
}
\keys_set:nn { subfiglisttest } { test = first }

\AtBeginDocument
{
  % Disable option that decides whether to use caption package
  \keys_define:nn { subfiglist }
  {
    caption.code:n = { \msg_error:nn { subfiglist } { option~invalid } }
  }
  
  % Derive command to put label inset from caption package
  % code, if subfiglist package is loaded with caption option.
  \bool_if:NT \subfiglist_tweak_caption_package_bool
  {
    \cs_new:Npn \subfiglist_label_inset_caption_package:nn #1 #2
    %
    % #1: Text color
    % #2: Label number
    %
    {
      \int_compare:nT { #2 > 1 }
      {
        \addtocounter { \@subcaptype } { \numexpr -\value { \@subcaptype } }
        \addtocounter { \@subcaptype } { #2 }
        \addtocounter { \@subcaptype } { -1 }
      }
      % Step subcaption counter
      \caption@@@refstepcounter\@subcaptype
      % Setup label anchor
      \caption@prepareanchor\@subcaptype{}
      \memcaptioninfo\@subcaptype{\csname the\@subcaptype\endcsname}{}{}
      \@nameuse{nag@hascaptiontrue}
      % Begin caption
      \caption@beginex\@subcaptype{}{}
      \caption@setfloatcapt{\caption@boxrestore\caption@normalsize}
      % Add contentsline
      \caption@setfnum\@subcaptype
      \caption@addcontentsline\@subcaptype{}
      % Print actual label with formatting but without
      % usual spacing needed in a figure environment.
      \caption@setfloatcapt{\caption@boxrestore\caption@normalsize}
      \caption@@@make{\color{#1}\csname fnum@\@subcaptype\endcsname}
        {\ignorespaces\caption@makeanchor{}}
      % End caption
      \caption@end
    }
    
    \cs_generate_variant:Nn \subfiglist_label_inset_caption_package:nn { VV }
  }
  
  % Keys for subfiglist environment
  \keys_define:nn { subfiglist-environment }
  {
    % Width of environment
    environment-width.dim_set:N               = \subfiglist_env_width_dim,
    environment-width.value_required:n        = true,
    ew.meta:n                                 = { environment-width = #1 },
    ew.value_required:n                       = true,
    
    % Use \hspace* to output space?
    environment-use-hspace.bool_set:N        = \subfiglist_env_use_hspace_bool,
    environment-use-hspace.default:n         = true,
    euh.meta:n                               = { environment-use-hspace = #1 },
    euh.default:n                            = true,
    
    % Space between canvases
    canvas-space.dim_set:N                    = \subfiglist_canvas_space_environment_default_dim,
    canvas-space.value_required:n             = true,
    cs.meta:n                                 = { canvas-space = #1 },
    cs.value_required:n                       = true,
    
    % Space above canvas
    canvas-top.dim_set:N                     = \subfiglist_canvas_top_environment_default_dim,
    canvas-top.value_required:n              = true,
    ct.meta:n                                = { canvas-top = #1 },
    ct.value_required:n                      = true,
    
    % Space below canvas
    canvas-bottom.dim_set:N                  = \subfiglist_canvas_bot_environment_default_dim,
    canvas-bottom.value_required:n           = true,
    cb.meta:n                                = { canvas-bottom = #1 },
    cb.value_required:n                      = true,
    
    % Space left of canvas
    canvas-left.dim_set:N                    = \subfiglist_canvas_left_environment_default_dim,
    canvas-left.value_required:n             = true,
    cl.meta:n                                = { canvas-left = #1 },
    cl.value_required:n                      = true,
    
    % Space right of canvas
    canvas-right.dim_set:N                   = \subfiglist_canvas_right_environment_default_dim,
    canvas-right.value_required:n            = true,
    cr.meta:n                                = { canvas-right = #1 },
    cr.value_required:n                      = true,
    
    % Canvas margin
    canvas-margin.meta:n                     = { canvas-top = #1, 
                                                 canvas-bottom = #1, 
                                                 canvas-left = #1,
                                                 canvas-right = #1 },
    canvas-margin.value_required:n           = true,
    cm.meta:n                                = { canvas-margin = #1 },
    cm.value_required:n                      = true,
    
    % Canvas frame color
    canvas-frame-color.tl_set:N              = \subfiglist_canvas_frame_color_environment_default_tl,
    canvas-frame-color.value_required:n      = true,
    canvas-frame-colour.meta:n               = { canvas-frame-color = #1 },
    canvas-frame-colour.value_required:n     = true,
    cfc.meta:n                               = { canvas-frame-color = #1 },
    cfc.value_required:n                     = true,
    
    % Canvas frame border width
    canvas-frame-width.dim_set:N             = \subfiglist_canvas_frame_width_environment_default_dim,
    canvas-frame-width.value_required:n      = true,
    cfw.meta:n                               = { canvas-frame-width = #1 },
    cfw.value_required:n                     = true,
    
    % Canvas frame top separation
    canvas-frame-top.dim_set:N               = \subfiglist_canvas_frame_top_environment_default_dim,
    canvas-frame-top.value_required:n        = true,
    cft.meta:n                               = { canvas-frame-top = #1 },
    cft.value_required:n                     = true,
    
    % Canvas frame bottom separation
    canvas-frame-bottom.dim_set:N            = \subfiglist_canvas_frame_bottom_environment_default_dim,
    canvas-frame-bottom.value_required:n     = true,
    cfb.meta:n                               = { canvas-frame-bottom = #1 },
    cfb.value_required:n                     = true,
    
    % Canvas frame left separation
    canvas-frame-left.dim_set:N              = \subfiglist_canvas_frame_left_environment_default_dim,
    canvas-frame-left.value_required:n       = true,
    cfl.meta:n                               = { canvas-frame-left = #1 },
    cfl.value_required:n                     = true,
    
    % Canvas frame right separation
    canvas-frame-right.dim_set:N             = \subfiglist_canvas_frame_right_environment_default_dim,
    canvas-frame-right.value_required:n      = true,
    cfr.meta:n                               = { canvas-frame-right = #1 },
    cfr.value_required:n                     = true,
    
    % Canvas frame padding
    canvas-frame-padding.meta:n              = { canvas-frame-top = #1, 
                                                 canvas-frame-bottom = #1, 
                                                 canvas-frame-left = #1,
                                                 canvas-frame-right = #1 },
    canvas-frame-padding.value_required:n    = true,
    cfp.meta:n                               = { canvas-frame-padding = #1 },
    cfp.value_required:n                     = true,
    
    % Horizontal positioning of label (left, center, right)
    label-hpos.choice:,
    label-hpos.choices:nn                    = { l, c, r }
      { \tl_set_eq:NN \subfiglist_label_hpos_environment_default_tl \l_keys_choice_tl },
    label-hpos.value_required:n              = true,
    lh.choice:,
    lh.choices:nn                            = { l, c, r }
      { \tl_set_eq:NN \subfiglist_label_hpos_environment_default_tl \l_keys_choice_tl },
    lh.value_required:n                      = true,
    
    % Vertical positioning of label (top, center, bottom)
    label-vpos.choice:,
    label-vpos.choices:nn                    = { t, c, b }
      { \tl_set_eq:NN \subfiglist_label_vpos_environment_default_tl \l_keys_choice_tl },
    label-vpos.value_required:n              = true,
    lv.choice:,
    lv.choices:nn                            = { t, c, b }
      { \tl_set_eq:NN \subfiglist_label_vpos_environment_default_tl \l_keys_choice_tl },
    lv.value_required:n                      = true,
    
    % Horizontal shift of label
    label-xshift.dim_set:N                   = \subfiglist_label_xshift_environment_default_dim,
    label-xshift.value_required:n            = true,
    lx.meta:n                                = { label-xshift = #1 },
    lx.value_required:n                      = true,
    
    % Vertical shift of label
    label-yshift.dim_set:N                   = \subfiglist_label_yshift_environment_default_dim,
    label-yshift.value_required:n            = true,
    ly.meta:n                                = { label-yshift = #1 },
    ly.value_required:n                      = true,
    
    % Label color
    label-color.tl_set:N                     = \subfiglist_label_color_environment_default_tl,
    label-color.value_required:n             = true,
    label-colour.meta:n                      = { label-color = #1 },
    label-colour.value_required:n            = true,
    lc.meta:n                                = { label-color = #1 },
    lc.value_required:n                      = true,
    
    % Label background
    label-background.tl_set:N                = \subfiglist_label_background_environment_default_tl,
    label-background.value_required:n        = true,
    lb.meta:n                                = { label-background = #1 },
    lb.value_required:n                      = true,
    
    % Error catching
    unknown.code:n         =
    {
      \msg_error:nnVn { subfiglist } { option~unknown }
        \l_keys_key_tl { environment~subfiglist }
    }
  }

  % Keys for macros \subfiglistfile, \subfiglistdummy and \subfiglistdummyfile
  \tl_map_inline:nn { { subfiglistfile } { subfiglistdummy } { subfiglistdummyfile } }
  {
    \keys_define:nn { #1 }
    {
      % Space above canvas
      top.dim_set:N                     = \subfiglist_canvas_top_dim,
      top.value_required:n              = true,
      t.meta:n                          = { top = ##1 },
      t.value_required:n                = true,

      % Space below canvas
      bottom.dim_set:N                  = \subfiglist_canvas_bot_dim,
      bottom.value_required:n           = true,
      b.meta:n                          = { bottom = ##1 },
      b.value_required:n                = true,

      % Space left of canvas
      left.dim_set:N                    = \subfiglist_canvas_left_dim,
      left.value_required:n             = true,
      l.meta:n                          = { left = ##1 },
      l.value_required:n                = true,

      % Space right of canvas
      right.dim_set:N                   = \subfiglist_canvas_right_dim,
      right.value_required:n            = true,
      r.meta:n                          = { right = ##1 },
      r.value_required:n                = true,

      % Canvas margin
      margin.meta:n                     = { top = #1, 
                                            bottom = #1, 
                                            left = #1,
                                            right = #1 },
      margin.value_required:n           = true,
      m.meta:n                          = { margin = #1 },
      m.value_required:n                = true,
    
      % Frame color
      frame-color.tl_set:N              = \subfiglist_canvas_frame_color_tl,
      frame-color.value_required:n      = true,
      frame-colour.meta:n               = { frame-color = ##1 },
      frame-colour.value_required:n     = true,
      fc.meta:n                         = { frame-color = ##1 },
      fc.value_required:n               = true,

      % Frame width
      frame-width.dim_set:N             = \subfiglist_canvas_frame_width_dim,
      frame-width.value_required:n      = true,
      fw.meta:n                         = { frame-width = ##1 },
      fw.value_required:n               = true,

      % Frame top separation
      frame-top.dim_set:N               = \subfiglist_canvas_frame_top_dim,
      frame-top.value_required:n        = true,
      ft.meta:n                         = { frame-top = ##1 },
      ft.value_required:n               = true,

      % Frame bottom separation
      frame-bottom.dim_set:N            = \subfiglist_canvas_frame_bottom_dim,
      frame-bottom.value_required:n     = true,
      fb.meta:n                         = { frame-bottom = ##1 },
      fb.value_required:n               = true,

      % Frame left separation
      frame-left.dim_set:N              = \subfiglist_canvas_frame_left_dim,
      frame-left.value_required:n       = true,
      fl.meta:n                         = { frame-left = ##1 },
      fl.value_required:n               = true,

      % Frame right separation
      frame-right.dim_set:N             = \subfiglist_canvas_frame_right_dim,
      frame-right.value_required:n      = true,
      fr.meta:n                         = { frame-right = ##1 },
      fr.value_required:n               = true,

      % Canvas frame separation
      frame-padding.meta:n              = { frame-top = ##1,
                                            frame-bottom = ##1, 
                                            frame-left = ##1,
                                            frame-right = ##1 },
      frame-padding.value_required:n    = true,
      fp.meta:n                         = { frame-padding = ##1 },
      fp.value_required:n               = true,

      % Error catching
      unknown.code:n                    =
      {
        \msg_error:nnVx { subfiglist } { option~unknown }
          \l_keys_key_tl { command~\token_to_str:c { #1 } }
      }
    }
  }
  
  % Keys for command \subfiglistlabel
  \keys_define:nn { subfiglistlabel }
  {
    % Horizontal positioning (left, center, right)
    hpos.choice:,
    hpos.choices:nn             = { l, c, r }
      { \int_set_eq:NN \subfiglist_label_hpos_int \l_keys_choice_int },
    hpos.value_required:n       = true,
    h.choice:,
    h.choices:nn                = { l, c, r }
      { \int_set_eq:NN \subfiglist_label_hpos_int \l_keys_choice_int },
    h.value_required:n          = true,
    
    % Vertical positioning (top, center, bottom)
    vpos.choice:,
    vpos.choices:nn             = { t, c, b }
      { \int_set_eq:NN \subfiglist_label_vpos_int \l_keys_choice_int },
    vpos.value_required:n       = true,
    v.choice:,
    v.choices:nn                = { t, c, b }
      { \int_set_eq:NN \subfiglist_label_vpos_int \l_keys_choice_int },
    v.value_required:n          = true,
    
    % Horizontal shift
    xshift.dim_set:N            = \subfiglist_label_xshift_dim,
    xshift.value_required:n     = true,
    x.meta:n                    = { xshift = #1 },
    x.value_required:n          = true,
    
    % Vertical shift
    yshift.dim_set:N            = \subfiglist_label_yshift_dim,
    yshift.value_required:n     = true,
    y.meta:n                    = { yshift = #1 },
    y.value_required:n          = true,
    
    % Color
    color.tl_set:N              = \subfiglist_label_color_tl,
    color.value_required:n      = true,
    colour.meta:n               = { color = #1 },
    colour.value_required:n     = true,
    c.meta:n                    = { color = #1 },
    c.value_required:n          = true,
    
    % Background
    background.tl_set:N         = \subfiglist_label_background_tl,
    background.value_required:n = true,
    b.meta:n                    = { background = #1 },
    b.value_required:n          = true,
    
    % Error catching
    unknown.code:n              =
    {
      \msg_error:nnVx { subfiglist } { option~unknown }
        \l_keys_key_tl { command~\token_to_str:c { subfiglistlabel } }
    }
  }
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Helper functions   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Function for constructing a command sequence via \csname, using it and
% causing an error, if it does not exist
\cs_new:Npn \subfiglist_use:c #1
{
  \cs_if_exist_use:cF { #1 } { \msg_error:nnf { subfiglist } { undefined~command~sequence } { \token_to_str:c { #1 } } }
}


% Command for setting a token list variable to head
% of another token list variable. If the heading token
% is enclosed by braces, one level of braces will be removed
\cs_new:Npn \subfiglist_tl_set_head:Nn #1 #2
%
% #1: Token list variable to be set
% #2: Token list variable to get head from
%
{
  \subfiglist_exp_args:NNt \tl_set:Nn #1 { \tl_head:n { #2 } }
}

\cs_generate_variant:Nn \subfiglist_tl_set_head:Nn { NV }

% Command for setting a token list variable to tail
% of another token list variable. No braces will be
% removed from any of the trailing tokens.
\cs_new:Npn \subfiglist_tl_set_tail:Nn #1 #2
%
% #1: Token list variable to be set
% #2: Token list variable to get tail from
%
{
  \subfiglist_exp_args:NNt \tl_set:Nn #1 { \tl_tail:n { #2 } }
}

\cs_generate_variant:Nn \subfiglist_tl_set_tail:Nn { NV }

% Commands for wrapping tokens with braces and storing them in
% a token list variable
\cs_new:Npn \subfiglist_tl_set_wrapped:Nn #1 #2
%
% #1: Token list variable to be set
% #2: First token
%
{
  \tl_set:Nn #1 { { #2 } }
}

\cs_generate_variant:Nn \subfiglist_tl_set_wrapped:Nn { NV }

\cs_new:Npn \subfiglist_tl_set_wrapped:Nnn #1 #2 #3
%
% #1: Token list variable to be set
% #2: First token
% #3: Second token
%
{
  \tl_set:Nn #1 { { { #2 } { #3 } } }
}

\cs_generate_variant:Nn \subfiglist_tl_set_wrapped:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_tl_set_wrapped:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_tl_set_wrapped:Nnn { NVV }

% Commands for removing braces from tokens and storing them in
% a token list variable
\cs_new:Npn \subfiglist_tl_set_unwrapped:Nn #1 #2
%
% #1: Token list variable to be set
% #2: Token list with braces
%
{
  \tl_set:Nn #1 #2
}

\cs_generate_variant:Nn \subfiglist_tl_set_unwrapped:Nn { NV }

% Commands for transforming property lists into token lists
% and vice versa
\cs_new:Npn \subfiglist_tl_set_from_prop:NN #1 #2
%
% #1: Token list to be set
% #2: Property list
%
{
  \group_begin:
    \tl_clear:N \subfiglist_tmpa_tl

    \prop_map_inline:Nn #2
    {
      \subfiglist_tl_set_wrapped:Nnn \subfiglist_tmpb_tl { ##1 } { ##2 }
      \tl_put_right:NV \subfiglist_tmpa_tl \subfiglist_tmpb_tl
    }
    \tl_set_eq:NN #1 \subfiglist_tmpa_tl
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \group_end:
}

\cs_new:Npn \subfiglist_prop_set_from_tl:NN #1 #2
%
% #1: Property list to be set
% #2: Token list
%
{
  \prop_clear:N #1
  \tl_map_inline:Nn #2
  {
    \prop_put:Nnn #1 ##1
  }
}

% Commands for transforming sequences into token lists
% and vice versa
\cs_new:Npn \subfiglist_tl_set_from_seq:NN #1 #2
%
% #1: Token list to be set
% #2: Sequence
%
{
  \group_begin:
    \tl_clear:N \subfiglist_tmpa_tl

    \seq_map_inline:Nn #2
    {
      \subfiglist_tl_set_wrapped:Nn \subfiglist_tmpb_tl { ##1 }
      \tl_put_right:NV \subfiglist_tmpa_tl \subfiglist_tmpb_tl
    }
    \tl_set_eq:NN #1 \subfiglist_tmpa_tl
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \group_end:
}

\tl_map_inline:nn { nN }
{
  \cs_new:cpn { subfiglist_seq_set_from_tl:N #1 } ##1 ##2
  %
  % #1: Sequence to be set
  % #2: Token list
  %
  {
    \seq_clear:N ##1
    \subfiglist_use:c { tl_map_inline: #1 n } { ##2 }
    {
      \seq_put_right:Nn ##1 { ####1 }
    }
  }
}

\cs_new:Npn \subfiglist_prop_get_safe:NnN #1 #2 #3
%
% #1: Property list to recover value from
% #2: Key to recover
% #3: Token list variable to store recovered value
%
{
  \prop_get:NnN #1 { #2 } #3
  \quark_if_no_value:NT #3
  {
    \tl_clear:N #3
    \msg_error:nnn { subfiglist } { internal~error } { key~`#2'~not~found~in~property~list~#1 }
  }
}

% Command for setting a single key-value pair
\cs_new:Npn \subfiglist_key_set:nnn #1 #2 #3
%
% #1: Module of the key to be set
% #2: Name of the key
% #3: Value to be set
{
  \keys_set:nn { #1 }
  {
    #2 = #3
  }
}

\cs_generate_variant:Nn \subfiglist_key_set:nnn { nnV }


% Provide framework for exporting group scope local variables according to discussion
% at https://tex.stackexchange.com/questions/56294/how-do-i-get-a-value-out-of-a-group
\cs_new:Nn \subfiglist_group_after_insert:nn
{ 
  \cs_if_exist:cF { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
  {
    \tl_new:c { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
  }

  % First time the function is executed inside the group:
  \tl_if_empty:vT { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
  {
    % Set up the aftergroup execution:
    \group_insert_after:c { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }

    % Reset the material for aftergroup execution:
    \tl_gset:cx { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
    {
      \tl_gclear:c { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
    }
  }

  % Append the new material to the aftergroup execution:
  \tl_gput_right:cx  { g_subfiglist_aftergroup_ \int_use:N \etex_currentgrouplevel:D _tl }
  {
    \exp_not:n { #1 {#2} }
  }
}

\cs_generate_variant:Nn \subfiglist_group_after_insert:nn {nV}

\cs_new:Npn \subfiglist_group_var_return:NN #1 #2
{
  \subfiglist_group_after_insert:nV { #1 #2 } { #2 } 
}



%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Number tests   %%%
%%%%%%%%%%%%%%%%%%%%%%%%

% Test whether token is a digit.
\prg_new_conditional:Npnn \subfiglist_is_digit:N #1 { p, T, F, TF }
%
% #1: Token
%
{
  % Exclude that a token list of the form { tokens } was passed
  % to the N argument
  \tl_if_single:nTF { #1 }
  {
    % Exclude that a token list of the form { { tokens } } was
    % passed to the N argument
    \tl_if_single:nTF #1
    {
      \bool_if:nTF
      {
        \token_if_eq_charcode_p:NN 0 #1 ||
        \token_if_eq_charcode_p:NN 1 #1 ||
        \token_if_eq_charcode_p:NN 2 #1 ||
        \token_if_eq_charcode_p:NN 3 #1 ||
        \token_if_eq_charcode_p:NN 4 #1 ||
        \token_if_eq_charcode_p:NN 5 #1 ||
        \token_if_eq_charcode_p:NN 6 #1 ||
        \token_if_eq_charcode_p:NN 7 #1 ||
        \token_if_eq_charcode_p:NN 8 #1 ||
        \token_if_eq_charcode_p:NN 9 #1
      }{
        \prg_return_true:
      }{
        \prg_return_false:
      }
    }{
      \prg_return_false:
    }
  }{
    \prg_return_false:
  }
}

% Define variants of \subfiglist_is_digit expanding its argument twice
\cs_new:Npn \subfiglist_is_digit_p:t #1
{
  \subfiglist_exp_args:Nt \subfiglist_is_digit_p:N { #1 }
}
\cs_new:Npn \subfiglist_is_digit:tT #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_digit:NT { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_digit:tF #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_digit:NF { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_digit:tTF #1 #2 #3
{
  \subfiglist_exp_args:Nt \subfiglist_is_digit:NTF { #1 } { #2 } { #3 }
}

% Test whether token list is an integer or empty
\prg_new_conditional:Npnn \subfiglist_is_integer_or_empty:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  % Check whether token list is empty
  \tl_if_empty:nTF { #1 }
  {
    \prg_return_true:
  }{
    % Does token list start with an explicit space?
    \tl_if_head_is_space:nTF { #1 }
    {
      \prg_return_false:
    }{
      % Check whether first token is digit
      \subfiglist_is_digit:tTF { \tl_head:n { #1 } }
      {
        % Check remaining tokens recursively
        \subfiglist_is_integer_or_empty:tTF { \tl_tail:n { #1 } }
        {
          \prg_return_true:
        }{
          \prg_return_false:
        }
      }{
        % Return false otherwise
        \prg_return_false:
      }
    }
  }
}

% Define variants of \subfiglist_is_integer_or_empty expanding its argument twice
\cs_new:Npn \subfiglist_is_integer_or_empty_p:t #1
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer_or_empty_p:n { #1 }
}
\cs_new:Npn \subfiglist_is_integer_or_empty:tT #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer_or_empty:nT { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_integer_or_empty:tF #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer_or_empty:nF { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_integer_or_empty:tTF #1 #2 #3
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer_or_empty:nTF { #1 } { #2 } { #3 }
}

% Test whether token list is an integer
\prg_new_conditional:Npnn \subfiglist_is_integer:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  \bool_if:nTF
  {
    \bool_lazy_and_p:nn { ! \tl_if_empty_p:n { #1 } } { \subfiglist_is_integer_or_empty_p:n { #1 } }
  }{
    \prg_return_true:
  }{
    \prg_return_false:
  }
}

% Define variants of \subfiglist_is_integer expanding its argument twice
\cs_new:Npn \subfiglist_is_integer_p:t #1
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer_p:n { #1 }
}
\cs_new:Npn \subfiglist_is_integer:tT #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer:nT { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_integer:tF #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer:nF { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_integer:tTF #1 #2 #3
{
  \subfiglist_exp_args:Nt \subfiglist_is_integer:nTF { #1 } { #2 } { #3 }
}

\cs_generate_variant:Nn \subfiglist_is_integer_p:n { V }
\cs_generate_variant:Nn \subfiglist_is_integer:nT  { V }
\cs_generate_variant:Nn \subfiglist_is_integer:nF  { V }
\cs_generate_variant:Nn \subfiglist_is_integer:nTF { V }


% Test whether token list is a positive integer
\prg_new_conditional:Npnn \subfiglist_is_positive_integer:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  \bool_if:nTF
  {
    \bool_lazy_and_p:nn { \subfiglist_is_integer_p:n { #1 } } { \int_compare_p:nNn { #1 } > { 0 } }
  }{
    \prg_return_true:
  }{
    \prg_return_false:
  }
}

% Define variants of \subfiglist_is_positive_integer expanding its argument twice
\cs_new:Npn \subfiglist_is_positive_integer_p:t #1
{
  \subfiglist_exp_args:Nt \subfiglist_is_positive_integer_p:n { #1 }
}
\cs_new:Npn \subfiglist_is_positive_integer:tT #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_positive_integer:nT { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_positive_integer:tF #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_positive_integer:nF { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_positive_integer:tTF #1 #2 #3
{
  \subfiglist_exp_args:Nt \subfiglist_is_positive_integer:nTF { #1 } { #2 } { #3 }
}

\cs_generate_variant:Nn \subfiglist_is_positive_integer_p:n { V }
\cs_generate_variant:Nn \subfiglist_is_positive_integer:nT  { V }
\cs_generate_variant:Nn \subfiglist_is_positive_integer:nF  { V }
\cs_generate_variant:Nn \subfiglist_is_positive_integer:nTF { V }


% Test whether token list is a float or empty
\prg_new_conditional:Npnn \subfiglist_is_float_or_empty:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  % Check whether token list is empty
  \tl_if_empty:nTF { #1 }
  {
    \prg_return_true:
  }{
    % Does token list start with an explicit space?
    \tl_if_head_is_space:nTF { #1 }
    {
      \prg_return_false:
    }{
      % Check whether first token is a digit
      \subfiglist_is_digit:tTF { \tl_head:n { #1 } }
      {
        % Recursively check remaining tokens
        \subfiglist_is_float_or_empty:tTF { \tl_tail:n { #1 } }
        {
          \prg_return_true:
        }{
          \prg_return_false:
        }
      }{
        % Check for decimal separator
        \token_if_eq_charcode:NtTF . { \tl_head:n { #1 } }
        {
          % Check if trailing end is an integer
          \subfiglist_is_integer:tTF { \tl_tail:n { #1 } }
          {
            \prg_return_true:
          }{
            \prg_return_false:
          }
        }{
          % Return false otherwise
          \prg_return_false:
        }
      }
    }
  }
}

% Define variants of \subfiglist_is_float_or_empty expanding its argument twice
\cs_new:Npn \subfiglist_is_float_or_empty_p:t #1
{
  \subfiglist_exp_args:Nt \subfiglist_is_float_or_empty_p:n { #1 }
}
\cs_new:Npn \subfiglist_is_float_or_empty:tT #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_float_or_empty:nT { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_float_or_empty:tF #1 #2
{
  \subfiglist_exp_args:Nt \subfiglist_is_float_or_empty:nF { #1 } { #2 }
}
\cs_new:Npn \subfiglist_is_float_or_empty:tTF #1 #2 #3
{
  \subfiglist_exp_args:Nt \subfiglist_is_float_or_empty:nTF { #1 } { #2 } { #3 }
}

% Test whether token list is a float
\prg_new_conditional:Npnn \subfiglist_is_float:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  \bool_if:nTF
  {
    \bool_lazy_and_p:nn { ! \tl_if_empty_p:n { #1 } } { \subfiglist_is_float_or_empty_p:n { #1 } }
  }{
    \prg_return_true:
  }{
    \prg_return_false:
  }
}

\cs_generate_variant:Nn \subfiglist_is_float_p:n { V }
\cs_generate_variant:Nn \subfiglist_is_float:nT  { V }
\cs_generate_variant:Nn \subfiglist_is_float:nF  { V }
\cs_generate_variant:Nn \subfiglist_is_float:nTF { V }

% Test whether token list is a positive float
\prg_new_conditional:Npnn \subfiglist_is_positive_float:n #1 { p, T, F, TF }
%
% #1: Token list
%
{
  \bool_if:nTF
  {
    \bool_lazy_and_p:nn { \subfiglist_is_float_p:n { #1 } } { \fp_compare_p:nNn { #1 } > { 0 } }
  }{
    \prg_return_true:
  }{
    \prg_return_false:
  }
}

\cs_generate_variant:Nn \subfiglist_is_positive_float_p:n { V }
\cs_generate_variant:Nn \subfiglist_is_positive_float:nT  { V }
\cs_generate_variant:Nn \subfiglist_is_positive_float:nF  { V }
\cs_generate_variant:Nn \subfiglist_is_positive_float:nTF { V }


% Test whether a float is NaN
\prg_new_conditional:Npnn \subfiglist_is_nan:n #1 { p, T, F, TF }
%
% #1: Float to be tested
%
{
  % Use test described in explanation of \fp_compare:nNnTF from interface3 documentation.
  \fp_compare:nNnTF { #1 } ? { 0 }
  {
    % Float is NaN
    \prg_return_true:
  }{
    % Float is not NaN
    \prg_return_false:
  }
}

\cs_generate_variant:Nn \subfiglist_is_nan_p:n { V }
\cs_generate_variant:Nn \subfiglist_is_nan:nT  { V }
\cs_generate_variant:Nn \subfiglist_is_nan:nF  { V }
\cs_generate_variant:Nn \subfiglist_is_nan:nTF { V }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Specification string lexer   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_tokenize_is_integer_p:V #1
%
% #1: Token to be tested
%
{
  \subfiglist_is_positive_integer_p:V #1
}

\cs_new:Npn \subfiglist_tokenize_is_at_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nV { @ } #1
}

\cs_new:Npn \subfiglist_tokenize_is_newline_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nV { \\ } #1
}

\prg_new_conditional:Npnn \subfiglist_tokenize_is_subblock:V #1 { p }
%
% #1: Token to be tested
%
{
  \bool_if:nTF { \tl_if_single_p:V #1 || \tl_if_blank_p:V #1 }
  {
    \prg_return_false:
  }{
    \prg_return_true:
  }
}

\prg_new_conditional:Npnn \subfiglist_tokenize_is_error:V #1 { p }
%
% #1: Token to be tested
%
{
  \prg_return_true:
}

\cs_new:Npn \subfiglist_tokenize_integer:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl

  \seq_put_right:NV #2 \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpb_tl { canvas } \subfiglist_tmpa_tl
  \tl_put_right:NV #1 \subfiglist_tmpb_tl
}

\cs_new:Npn \subfiglist_tokenize_at:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl
  
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl
  \quark_if_no_value:NTF \subfiglist_tmpa_tl
  {
    \msg_error:nn { subfiglist } { missing~separator }
  }{
    \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpb_tl { separator } \subfiglist_tmpa_tl
    \tl_put_right:NV #1 \subfiglist_tmpb_tl
  }
}

\cs_new:Npn \subfiglist_tokenize_newline:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  % Consume newline character
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl
  
  \seq_get_left:NN #3 \subfiglist_tmpa_tl
  \tl_clear:N \subfiglist_tmpb_tl
  \quark_if_no_value:NTF \subfiglist_tmpa_tl
  {
    \tl_put_right:NV \subfiglist_tmpb_tl \subfiglist_canvas_space_environment_default_dim
  }{
    \token_if_eq_charcode:NVTF [ \subfiglist_tmpa_tl
    {
      \seq_pop_left:NN #3 \subfiglist_tmpa_tl
      \seq_get_left:NN #3 \subfiglist_tmpa_tl
      \bool_until_do:nn 
      {
        \bool_lazy_or_p:nn
          { \quark_if_no_value_p:N \subfiglist_tmpa_tl }
          { \token_if_eq_charcode_p:NV ] \subfiglist_tmpa_tl }
      }{
        \seq_pop_left:NN #3 \subfiglist_tmpa_tl
        \tl_put_right:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
        \seq_get_left:NN #3 \subfiglist_tmpa_tl
      }
      
      \quark_if_no_value:NTF \subfiglist_tmpa_tl
      {
        \msg_error:nn { subfiglist } { runaway~optional~argument }
      }{
        \seq_pop_left:NN #3 \subfiglist_tmpa_tl
      }
    }{
      \tl_put_right:NV \subfiglist_tmpb_tl \subfiglist_canvas_space_environment_default_dim
    }
  }
  \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpa_tl { newline } \subfiglist_tmpb_tl
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_new:Npn \subfiglist_tokenize_subblock:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl
  \group_begin:
    \tl_clear:N #1
    \seq_clear:N #2
    \subfiglist_seq_set_from_tl:NN #3 \subfiglist_tmpa_tl
    \subfiglist_tokenize_spec_str:NNN #1 #2 #3
    \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpa_tl { subblock } #1
    \subfiglist_tl_set_from_seq:NN \subfiglist_tmpb_tl #2
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpb_tl
  \group_end:
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
  \subfiglist_seq_set_from_tl:NN \subfiglist_tmp_seq \subfiglist_tmpb_tl
  \seq_concat:NNN #2 #2 \subfiglist_tmp_seq
}

\cs_new:Npn \subfiglist_tokenize_error:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  \seq_pop_left:NN #3 \subfiglist_tmpa_tl
  \msg_error:nnV { subfiglist } { parser~error } \subfiglist_tmpa_tl
}

% Lexer for subfiglist specification
\cs_new:Npn \subfiglist_tokenize_spec_str:NNN #1 #2 #3
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence variable for storing identifier numbers
% #3: Sequence containing specification string
%
{
  \group_begin:
    
    \bool_until_do:nn { \seq_if_empty_p:N #3 }
    {
      \seq_get_left:NN #3 \subfiglist_tmpa_tl
      
      \tl_map_inline:nn { { integer } { at } { newline } { subblock } { error } }
      {
        \bool_if:nT { \subfiglist_use:c { subfiglist_tokenize_is_ ##1 _p:V } \subfiglist_tmpa_tl }
        {
          \subfiglist_use:c { subfiglist_tokenize_ ##1 :NNN } #1 #2 #3
          \tl_map_break:
        }
      }
    }
    \subfiglist_tl_set_from_seq:NN \subfiglist_tmpa_tl #2
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
  \group_end:
  \subfiglist_seq_set_from_tl:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
  \seq_concat:NNN #2 #2 \subfiglist_tmp_seq
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Specification string parser   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_parse_is_canvas_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nf { canvas } { \tl_head:V #1 }
}

\cs_new:Npn \subfiglist_parse_is_separator_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nf { separator } { \tl_head:V #1 }
}

\cs_new:Npn \subfiglist_parse_is_newline_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nf { newline } { \tl_head:V #1 }
}

\cs_new:Npn \subfiglist_parse_is_subblock_p:V #1
%
% #1: Token to be tested
%
{
  \str_if_eq_p:nf { subblock } { \tl_head:V #1 }
}

\cs_new:Npn \subfiglist_parse_is_line_p:V #1
%
% #1: Token to be tested
%
{
  \bool_lazy_any_p:n
  {
    { \subfiglist_parse_is_canvas_p:V #1 }
    { \subfiglist_parse_is_separator_p:V #1 }
    { \subfiglist_parse_is_subblock_p:V #1 }
  }
}

\prg_new_conditional:Npnn \subfiglist_parse_is_error:V #1 { p }
%
% #1: Token to be tested
%
{
  \prg_return_true:
}

\cs_new:Npn \subfiglist_parse_canvas:NN #1 #2
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence containing tokenized specification string
%
{
  \seq_pop_left:NN #2 \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
  \tl_put_right:NV #1 \subfiglist_tmpb_tl
  
  \seq_get_left:NN #2 \subfiglist_tmpa_tl
  \bool_lazy_any:nF
  {
    { \quark_if_no_value_p:N \subfiglist_tmpa_tl }
    { \subfiglist_parse_is_separator_p:V \subfiglist_tmpa_tl }
    { \subfiglist_parse_is_newline_p:V \subfiglist_tmpa_tl }
  }{
    \tl_clear:N \subfiglist_tmpa_tl
    \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpb_tl { space } \subfiglist_tmpa_tl
    \tl_put_right:NV #1 \subfiglist_tmpb_tl
  }
}

\cs_new:Npn \subfiglist_parse_separator:NN #1 #2
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence containing tokenized specification string
%
{
  \seq_pop_left:NN #2 \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
  \tl_put_right:NV #1 \subfiglist_tmpb_tl
}

\cs_new:Npn \subfiglist_parse_newline:NN #1 #2
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence containing tokenized specification string
%
{
  \seq_pop_left:NN #2 \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
  \tl_put_right:NV #1 \subfiglist_tmpb_tl
}

\cs_new:Npn \subfiglist_parse_subblock:NN #1 #2
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence containing specification string
%
{
  \seq_pop_left:NN #2 \subfiglist_tmpa_tl
  \subfiglist_tl_set_tail:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
  % Remove one level of braces
  \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpa_tl \subfiglist_tmpb_tl
  \group_begin:
    \tl_clear:N #1
    \subfiglist_parse_spec_tokens:NV #1 \subfiglist_tmpa_tl
    \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpa_tl { subblock } #1
    \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
  \group_end:
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
  
  \seq_get_left:NN #2 \subfiglist_tmpa_tl
  \bool_lazy_any:nF
  {
    { \quark_if_no_value_p:N \subfiglist_tmpa_tl }
    { \subfiglist_parse_is_separator_p:V \subfiglist_tmpa_tl }
    { \subfiglist_parse_is_newline_p:V \subfiglist_tmpa_tl }
  }{
    \tl_clear:N \subfiglist_tmpa_tl
    \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpb_tl { space } \subfiglist_tmpa_tl
    \tl_put_right:NV #1 \subfiglist_tmpb_tl
  }
}

% Parser for lines
\cs_new:Npn \subfiglist_parse_line:NN #1 #2
%
% #1: Token list variable for storing tokenized specification string
% #2: Sequence containing tokenized specification string
%
{
  \seq_get_left:NN #2 \subfiglist_tmpa_tl
  \tl_clear:N \subfiglist_tmpb_tl
  
  \bool_until_do:nn
  {
    \bool_lazy_or_p:nn
      { \quark_if_no_value_p:N \subfiglist_tmpa_tl }
      { ! \subfiglist_parse_is_line_p:V \subfiglist_tmpa_tl }
  }{
    \seq_pop_left:NN #2 \subfiglist_tmpa_tl
    \subfiglist_tl_set_wrapped:NV \subfiglist_tmpa_tl \subfiglist_tmpa_tl
    \tl_put_right:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
    \seq_get_left:NN #2 \subfiglist_tmpa_tl
  }
  
  \tl_set_eq:NN \subfiglist_tmpa_tl #1
  \group_begin:
    \tl_clear:N #1
    \seq_clear:N #2
    \tl_map_inline:Nn \subfiglist_tmpb_tl
    {
      \seq_put_right:Nn #2 { ##1 }
    }
    
    \bool_until_do:nn { \seq_if_empty_p:N #2 }
    {
      \seq_get_left:NN #2 \subfiglist_tmpa_tl
      
      \tl_map_inline:nn { { canvas } { separator } { subblock } { error } }
      {
        \bool_if:nT { \subfiglist_use:c { subfiglist_parse_is_ ##1 _p:V } \subfiglist_tmpa_tl }
        {
          \subfiglist_use:c { subfiglist_parse_ ##1 :NN } #1 #2
          \tl_map_break:
        }
      }
    }
    
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \group_end:
  
  \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpb_tl { line } #1
  \tl_put_right:NV \subfiglist_tmpa_tl \subfiglist_tmpb_tl
  \tl_set_eq:NN #1 \subfiglist_tmpa_tl
}

\cs_new:Npn \subfiglist_parse_error:NN #1 #2
{
  \seq_pop_left:NN #2 \subfiglist_tmpa_tl
  \tl_set:Nn \subfiglist_tmpb_tl { Parser~encountered~unexpected~token~` }
  \tl_put_right:Nf \subfiglist_tmpb_tl { \tl_head:V \subfiglist_tmpa_tl }
  \tl_put_right:Nn \subfiglist_tmpb_tl { ' }
  \msg_error:nnV { subfiglist } { internal~error } \subfiglist_tmpb_tl
}

% Parser for subfiglist specification
\cs_new:Npn \subfiglist_parse_spec_tokens:Nn #1 #2
%
% #1: Token list variable for storing parsed specification string
% #2: Token list containing tokenized specification string
%
{
  \group_begin:
    \seq_clear:N \subfiglist_spec_tokens_seq
    \tl_map_inline:nn { #2 }
    {
      \seq_put_right:Nn \subfiglist_spec_tokens_seq { ##1 }
    }
    
    \bool_until_do:nn { \seq_if_empty_p:N \subfiglist_spec_tokens_seq }
    {
      \seq_get_left:NN \subfiglist_spec_tokens_seq \subfiglist_tmpa_tl
      
      \tl_map_inline:nn { { line } { newline } { error } }
      {
        \bool_if:nT { \subfiglist_use:c { subfiglist_parse_is_ ##1 _p:V } \subfiglist_tmpa_tl }
        {
          \subfiglist_use:c { subfiglist_parse_ ##1 :NN } #1 \subfiglist_spec_tokens_seq
          \tl_map_break:
        }
      }
    }
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \group_end:
}

\cs_generate_variant:Nn \subfiglist_parse_spec_tokens:Nn { NV }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Verify canvas numbers   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Check if image numbers given in subfiglist specification are valid
\cs_new:Npn \subfiglist_verify_identifier_nums:NNN #1 #2 #3
%
% #1: Variable containing identifier numbers
% #2: Variable to store sorted identifier numbers
% #3: Variable to store total number of identifiers
%
{
  % Sort detected image numbers
  \seq_set_eq:NN #2 #1
  \seq_sort:Nn #2
  {
    \int_compare:nTF { ##1 > ##2 }
      { \sort_reversed: }
      { \sort_ordered: }
  }
  
  % Check if some image number is missing
  \int_zero:N \subfiglist_tmp_int
  \seq_map_inline:Nn #2
  {
    \int_incr:N \subfiglist_tmp_int
    
    \int_compare:nF { ##1 = \subfiglist_tmp_int }
    {
      \int_compare:nTF { ##1 > \subfiglist_tmp_int }
      {
        \msg_error:nnV { subfiglist } { missing~identifier } \subfiglist_tmp_int
        \seq_map_break:
      }{
        \msg_error:nnn { subfiglist } { double~identifier } { ##1 }
        \seq_map_break:
      }
    }
  }
  
  % Save total number of images
  \int_set_eq:NN #3 \subfiglist_tmp_int
  
  % Check if image numbers in subfiglist specification
  % are in ascending order and warn if otherwise
  \int_zero:N \subfiglist_tmp_int
  \seq_map_inline:Nn #1
  {
    \int_incr:N \subfiglist_tmp_int
    
    \int_compare:nF { ##1 = \subfiglist_tmp_int }
    {
      \msg_warning:nn { subfiglist } { wrong~identifier~order }
      \seq_map_break:
    }
  }
}

% Check if image numbers given in subfiglist body are valid
\cs_new:Npn \subfiglist_verify_canvas_nums:NNNn #1 #2 #3 #4
%
% #1: Variable containing identifier numbers
% #2: Variable containing canvas numbers
% #3: Variable to store sorted canvas numbers
% #4: Total number of identifiers
%
{
  % Sort detected image numbers
  \seq_set_eq:NN #3 #2
  \seq_sort:Nn #3
  {
    \int_compare:nTF { ##1 > ##2 }
      { \sort_reversed: }
      { \sort_ordered: }
  }
  
  % Check if some image number is missing
  \int_zero:N \subfiglist_tmp_int
  \seq_map_inline:Nn #3
  {
    \int_incr:N \subfiglist_tmp_int
    
    \int_compare:nF { ##1 = \subfiglist_tmp_int }
    {
      \int_compare:nTF { ##1 > \subfiglist_tmp_int }
      {
        \msg_error:nnV { subfiglist } { missing~canvas } \subfiglist_tmp_int
        \seq_map_break:
      }{
        \msg_error:nnn { subfiglist } { double~canvas } { ##1 }
        \seq_map_break:
      }
    }
  }
  
  % Is number of identifiers equal to number of canvases?
  \int_compare:nF { \subfiglist_tmp_int = #4 }
  {
    \int_compare:nTF { \subfiglist_tmp_int > #4 }
    {
      \msg_error:nnVn { subfiglist } { too~many~canvases } \subfiglist_tmp_int { #4 }
    }{
      \msg_error:nnnV { subfiglist } { too~many~identifiers } { #4 } \subfiglist_tmp_int
    }
  }

  % Check if canvas numbers in subfiglist body
  % are in ascending order and warn if otherwise
  \int_zero:N \subfiglist_tmp_int
  \seq_map_inline:Nn #2
  {
    \int_incr:N \subfiglist_tmp_int
    
    \int_compare:nF { ##1 = \subfiglist_tmp_int }
    {
      \msg_warning:nn { subfiglist } { wrong~canvas~order }
      \seq_map_break:
    }
  }
  
  % Check if canvas numbers in subfiglist specification and body
  % are in the same order and warn if otherwise
  \int_zero:N \subfiglist_tmp_int
  \seq_map_inline:Nn #2
  {
    \int_incr:N \subfiglist_tmp_int
    
    \int_compare:nF { ##1 = \seq_item:Nn #1 \subfiglist_tmp_int }
    {
      \msg_warning:nn { subfiglist } { mismatching~canvas~order }
      \seq_map_break:
    }
  }
}

\cs_generate_variant:Nn \subfiglist_verify_canvas_nums:NNNn { NNNV }

\tl_map_inline:nn { { label } { overlay } }
{
  % Check if image numbers given in subfiglist body are valid
  \cs_new:cpn { subfiglist_verify_ #1 _nums:NNNn } ##1 ##2 ##3 ##4
  %
  % #1: Variable containing identifier numbers
  % #2: Variable containing label/overlay numbers
  % #3: Variable to store sorted label/overlay numbers
  % #4: Total number of identifiers
  %
  {
    % Sort detected label/overlay numbers
    \seq_set_eq:NN ##3 ##2
    \seq_sort:Nn ##3
    {
      \int_compare:nTF { ####1 > ####2 }
        { \sort_reversed: }
        { \sort_ordered: }
    }
    
    % Check for double label/overlay numbers
    \int_zero:N \subfiglist_tmp_int
    \seq_map_inline:Nn ##3
    {
      \int_compare:nF { \subfiglist_tmp_int < ####1 }
      {
          \msg_error:nnn { subfiglist } { double~ #1 } { ####1 }
          \seq_map_break:
      }
      \int_set:Nn \subfiglist_tmp_int { ####1 }
    }
    
    % Check for too large label/overlay numbers
    \seq_get_right:NN ##3 \subfiglist_tmpa_tl
    \quark_if_no_value:NF \subfiglist_tmpa_tl
    {
      \int_compare:nT { \subfiglist_tmpa_tl > ##4 }
      {
        \msg_error:nnVn { subfiglist } { too~many~ #1 s } \subfiglist_tmpa_tl { ##4 }
      }
    }
    
    % Check if label/overlay numbers in subfiglist body
    % are in ascending order and warn if otherwise
    \int_zero:N \subfiglist_tmp_int
    \seq_map_inline:Nn ##2
    {
      \int_incr:N \subfiglist_tmp_int
      
      \int_compare:nF { ####1 = \seq_item:Nn ##3 { \subfiglist_tmp_int } }
      {
        \msg_warning:nn { subfiglist } { wrong~ #1 ~order }
        \seq_map_break:
      }
    }
    
    % Check if label/overlay numbers are in same order
    % as in specification string and warn if otherwise
    \int_zero:N \subfiglist_tmp_int
    \seq_map_inline:Nn ##1
    {
      \seq_if_in:NnT ##2 { ####1 }
      {
        \int_incr:N \subfiglist_tmp_int
        
        \int_compare:nF { ####1 = \seq_item:Nn ##2 { \subfiglist_tmp_int } }
        {
          \msg_warning:nn { subfiglist } { mismatching~ #1 ~order }
          \seq_map_break:
        }
      }
    }
  }

  \cs_generate_variant:cn { subfiglist_verify_ #1 _nums:NNNn } { NNNV }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Canvas setup commands   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tl_map_inline:nn { { file } { dummyfile } }
{
  \cs_new:cpn { subfiglist_setup_ #1 :nnn } ##1 ##2 ##3
  %
  % #1: optional arguments
  % #2: image number
  % #3: image path
  %
  {
    % Check if first argument is numeric
    \subfiglist_is_positive_integer:nTF { ##2 }
    {
      \seq_put_right:Nn \subfiglist_canvas_nums_seq { ##2 }

      % Save canvas type and image path
      \prop_clear:N \subfiglist_tmp_prop
      \prop_put:Nnn \subfiglist_tmp_prop { type } { #1 }
      \prop_put:Nnn \subfiglist_tmp_prop { path } { ##3 }

      % Get file ratio
      \subfiglist_get_file_ratio:Nnn \subfiglist_tmpa_tl { ##2 } { ##3 }
      \prop_put:NnV \subfiglist_tmp_prop { ratio } \subfiglist_tmpa_tl

      % Process opitonal arguments
      \subfiglist_key_set:nnV { subfiglist #1 } { top }          \subfiglist_canvas_top_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { bottom }       \subfiglist_canvas_bot_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { left }         \subfiglist_canvas_left_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { right }        \subfiglist_canvas_right_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-color }  \subfiglist_canvas_frame_color_environment_default_tl
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-width }  \subfiglist_canvas_frame_width_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-top }    \subfiglist_canvas_frame_top_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-bottom } \subfiglist_canvas_frame_bottom_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-left }   \subfiglist_canvas_frame_left_environment_default_dim
      \subfiglist_key_set:nnV { subfiglist #1 } { frame-right }  \subfiglist_canvas_frame_right_environment_default_dim
      \keys_set:nn { subfiglist #1 } { ##1 }

      % Save specified offsets
      \prop_put:NnV \subfiglist_tmp_prop { top }         \subfiglist_canvas_top_dim
      \prop_put:NnV \subfiglist_tmp_prop { bot }         \subfiglist_canvas_bot_dim
      \prop_put:NnV \subfiglist_tmp_prop { left }        \subfiglist_canvas_left_dim
      \prop_put:NnV \subfiglist_tmp_prop { right }       \subfiglist_canvas_right_dim
      \prop_put:NnV \subfiglist_tmp_prop { frame-color } \subfiglist_canvas_frame_color_tl
      \prop_put:NnV \subfiglist_tmp_prop { frame-width } \subfiglist_canvas_frame_width_dim
      \prop_put:NnV \subfiglist_tmp_prop { frame-top }   \subfiglist_canvas_frame_top_dim
      \prop_put:NnV \subfiglist_tmp_prop { frame-bot }   \subfiglist_canvas_frame_bottom_dim
      \prop_put:NnV \subfiglist_tmp_prop { frame-left }  \subfiglist_canvas_frame_left_dim
      \prop_put:NnV \subfiglist_tmp_prop { frame-right } \subfiglist_canvas_frame_right_dim

      \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
      \prop_put:NnV \subfiglist_canvas_prop { ##2 } \subfiglist_tmpa_tl
    }{
      \msg_error:nnnfn { subfiglist } { missing~number } { First~mandatory } { \token_to_str:c { subfiglist #1 } } { ##2 }
    }
  }
}

\cs_new:Npn \subfiglist_setup_dummy:nnn #1 #2 #3
%
% #1: optional arguments
% #2: image number
% #3: aspect ratio width:height
%
{
  % Check if first argument is numeric
  \subfiglist_is_positive_integer:nTF { #2 }
  {
    \seq_put_right:Nn \subfiglist_canvas_nums_seq { #2 }
    
    % Save canvas type and image path
    \prop_clear:N \subfiglist_tmp_prop
    \prop_put:Nnn \subfiglist_tmp_prop { type } { dummy }
    
    % Get dummy ratio
    \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `: } }
    \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `: } \subfiglist_tmp_int } { #3 }
    
    \int_compare:nTF { 1 <= \seq_count:N \subfiglist_tmp_seq <= 2 }
    {
      \int_compare:nTF { \seq_count:N \subfiglist_tmp_seq = 1 }
      {
        \seq_get_left:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
        \subfiglist_is_positive_float:VF \subfiglist_tmpa_tl
        {
          \msg_error:nnnfV { subfiglist } { missing~float } { Second } { \token_to_str:c { subfiglistdummy } } \subfiglist_tmpa_tl
        }
        \prop_put:NnV \subfiglist_tmp_prop { ratio } \subfiglist_tmpa_tl
      }{
        \seq_pop_left:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
        \subfiglist_is_positive_float:VF \subfiglist_tmpa_tl
        {
          \msg_error:nnnfV { subfiglist } { missing~float } { First~group~of~second } { \token_to_str:c { subfiglistdummy } } \subfiglist_tmpa_tl
        }
        \seq_pop_left:NN \subfiglist_tmp_seq \subfiglist_tmpb_tl
        \subfiglist_is_positive_float:VF \subfiglist_tmpb_tl
        {
          \msg_error:nnnfV { subfiglist } { missing~float } { Second~group~of~second } { \token_to_str:c { subfiglistdummy } } \subfiglist_tmpb_tl
        }
        \fp_set:Nn \subfiglist_tmp_fp { \subfiglist_tmpa_tl / \subfiglist_tmpb_tl }
        \tl_set:Nf \subfiglist_tmpa_tl { \fp_use:N \subfiglist_tmp_fp }
        \prop_put:NnV \subfiglist_tmp_prop { ratio } \subfiglist_tmpa_tl
      }
    }{
      \msg_error:nnnn { subfiglist } { malformed~argument } { argument~containing~zero~or~one~colons } { `#3' }
    }
    
    % Process opitonal arguments
    \subfiglist_key_set:nnV { subfiglistdummy } { top }          \subfiglist_canvas_top_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { bottom }       \subfiglist_canvas_bot_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { left }         \subfiglist_canvas_left_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { right }        \subfiglist_canvas_right_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-color }  \subfiglist_canvas_frame_color_environment_default_tl
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-width }  \subfiglist_canvas_frame_width_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-top }    \subfiglist_canvas_frame_top_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-bottom } \subfiglist_canvas_frame_bottom_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-left }   \subfiglist_canvas_frame_left_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistdummy } { frame-right }  \subfiglist_canvas_frame_right_environment_default_dim
    \keys_set:nn { subfiglistdummy } { #1 }
    
    % Save specified offsets
    \prop_put:NnV \subfiglist_tmp_prop { top }         \subfiglist_canvas_top_dim
    \prop_put:NnV \subfiglist_tmp_prop { bot }         \subfiglist_canvas_bot_dim
    \prop_put:NnV \subfiglist_tmp_prop { left }        \subfiglist_canvas_left_dim
    \prop_put:NnV \subfiglist_tmp_prop { right }       \subfiglist_canvas_right_dim
    \prop_put:NnV \subfiglist_tmp_prop { frame-color } \subfiglist_canvas_frame_color_tl
    \prop_put:NnV \subfiglist_tmp_prop { frame-width } \subfiglist_canvas_frame_width_dim
    \prop_put:NnV \subfiglist_tmp_prop { frame-top }   \subfiglist_canvas_frame_top_dim
    \prop_put:NnV \subfiglist_tmp_prop { frame-bot }   \subfiglist_canvas_frame_bottom_dim
    \prop_put:NnV \subfiglist_tmp_prop { frame-left }  \subfiglist_canvas_frame_left_dim
    \prop_put:NnV \subfiglist_tmp_prop { frame-right } \subfiglist_canvas_frame_right_dim
    
    \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
    \prop_put:NnV \subfiglist_canvas_prop { #2 } \subfiglist_tmpa_tl
  }{
    \msg_error:nnnfn { subfiglist } { missing~number } { First~mandatory } { \token_to_str:c { subfiglistdummy } } { #2 }
  }
}

% Command for specifying label
\cs_new:Npn \subfiglist_setup_label:nnn #1 #2 #3
%
% #1: optional argument
% #2: image number
% #3: label hook
%
{
  % Check if second argument is numeric
  \subfiglist_is_positive_integer:nTF { #2 }
  {
    \seq_put_right:Nn \subfiglist_label_nums_seq { #2 }
    \int_set:Nn \subfiglist_tmp_int { \seq_count:N \subfiglist_label_nums_seq }
    
    % Save label hook
    \prop_clear:N \subfiglist_tmp_prop
    \prop_put:Nnn \subfiglist_tmp_prop { hook } { #3 }
    
    % Process opitonal arguments
    \subfiglist_key_set:nnV { subfiglistlabel } { hpos }       \subfiglist_label_hpos_environment_default_tl
    \subfiglist_key_set:nnV { subfiglistlabel } { vpos }       \subfiglist_label_vpos_environment_default_tl
    \subfiglist_key_set:nnV { subfiglistlabel } { xshift }     \subfiglist_label_xshift_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistlabel } { yshift }     \subfiglist_label_yshift_environment_default_dim
    \subfiglist_key_set:nnV { subfiglistlabel } { color }      \subfiglist_label_color_environment_default_tl
    \subfiglist_key_set:nnV { subfiglistlabel } { background } \subfiglist_label_background_environment_default_tl
    \keys_set:nn { subfiglistlabel } { #1 }
    
    % Save label properties.
    \prop_put:NnV \subfiglist_tmp_prop { hpos }       \subfiglist_label_hpos_int
    \prop_put:NnV \subfiglist_tmp_prop { vpos }       \subfiglist_label_vpos_int
    \prop_put:NnV \subfiglist_tmp_prop { xshift }     \subfiglist_label_xshift_dim
    \prop_put:NnV \subfiglist_tmp_prop { yshift }     \subfiglist_label_yshift_dim
    \prop_put:NnV \subfiglist_tmp_prop { color }      \subfiglist_label_color_tl
    \prop_put:NnV \subfiglist_tmp_prop { background } \subfiglist_label_background_tl
    \prop_put:NnV \subfiglist_tmp_prop { sequenceno } \subfiglist_tmp_int
    
    \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
    \prop_put:NnV \subfiglist_label_prop { #2 } \subfiglist_tmpa_tl
  }{
    \msg_error:nnnfn { subfiglist } { missing~number } { First~mandatory } { \token_to_str:c { subfiglistlabel } } { #2 }
  }
}

% Command for specifying overlay
\cs_new:Npn \subfiglist_setup_overlay:nn #1 #2
%
% #1: image number
% #2: content
%
{
  % Check if first argument is numeric
  \subfiglist_is_positive_integer:nTF { #1 }
  {
    \seq_put_right:Nn \subfiglist_overlay_nums_seq { #1 }
    
    \prop_clear:N \subfiglist_tmp_prop
    \prop_put:Nnn \subfiglist_tmp_prop { content } { #2 }
    
    \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
    \prop_put:NnV \subfiglist_overlay_prop { #1 } \subfiglist_tmpa_tl
  }{
    \msg_error:nnnfn { subfiglist } { missing~number } { First~mandatory } { \token_to_str:c { subfiglistoverlay } } { #1 }
  }
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Canvas aspect ratio   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_get_aspect_hmode_canvas:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Canvas specification
{
  \subfiglist_prop_get_safe:NnN \subfiglist_canvas_prop { #4 } \subfiglist_tmpa_tl
  \subfiglist_prop_set_from_tl:NN \subfiglist_tmp_prop \subfiglist_tmpa_tl
  
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { ratio } \subfiglist_tmpa_tl
  \fp_set:NV #1 \subfiglist_tmpa_tl
  
  \dim_zero:N #2
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { left } \subfiglist_tmpa_tl
  \dim_add:NV #2 \subfiglist_tmpa_tl
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { right } \subfiglist_tmpa_tl
  \dim_add:NV #2 \subfiglist_tmpa_tl
  
  \dim_zero:N #3
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { top } \subfiglist_tmpa_tl
  \dim_add:NV #3 \subfiglist_tmpa_tl
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { bot } \subfiglist_tmpa_tl
  \dim_add:NV #3 \subfiglist_tmpa_tl
  
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-color } \subfiglist_tmpa_tl
  \str_if_eq:nVF { none } \subfiglist_tmpa_tl
  {
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-width } \subfiglist_tmpa_tl
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-left } \subfiglist_tmpb_tl
    \dim_add:NV #2 \subfiglist_tmpa_tl
    \dim_add:NV #2 \subfiglist_tmpb_tl
    
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-right } \subfiglist_tmpb_tl
    \dim_add:NV #2 \subfiglist_tmpa_tl
    \dim_add:NV #2 \subfiglist_tmpb_tl
    
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-top } \subfiglist_tmpb_tl
    \dim_add:NV #3 \subfiglist_tmpa_tl
    \dim_add:NV #3 \subfiglist_tmpb_tl
    
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-bot } \subfiglist_tmpb_tl
    \dim_add:NV #3 \subfiglist_tmpa_tl
    \dim_add:NV #3 \subfiglist_tmpb_tl
  }
  
  \prop_put:NnV \subfiglist_tmp_prop { hoff } #2
  \prop_put:NnV \subfiglist_tmp_prop { voff } #3
  \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
  \prop_put:NnV \subfiglist_canvas_prop { #4 } \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_get_aspect_hmode_canvas:NNNn { NNNV }

\cs_new:Npn \subfiglist_get_aspect_hmode_space:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Space specification
{
  \fp_set_eq:NN #1 \c_nan_fp
  \dim_set_eq:NN #2 \subfiglist_canvas_space_environment_default_dim
  \dim_zero:N #3
}

\cs_generate_variant:Nn \subfiglist_get_aspect_hmode_space:NNNn { NNNV }

\cs_new:Npn \subfiglist_get_aspect_hmode_separator:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Separator specification
{
  \dim_set:Nn \subfiglistlineheight { 1ex }
  \fp_set_eq:NN #1 \c_nan_fp
  
  \hbox_set:Nn \subfiglist_tmp_box { #4 }
  \dim_set:Nn #2 { \box_wd:N \subfiglist_tmp_box }
  \dim_set:Nn #3 { \box_ht:N \subfiglist_tmp_box }
}

\cs_generate_variant:Nn \subfiglist_get_aspect_hmode_separator:NNNn { NNNV }

\cs_new:Npn \subfiglist_get_aspect_hmode_subblock:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Newline specification
%
{
  \fp_set_eq:NN #1 \c_inf_fp
  \dim_zero:N #2
  \dim_zero:N #3
  
  \tl_map_inline:nn { #4 }
  {
    \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
    \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
    \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
    
    \group_begin:
      \subfiglist_use:c { subfiglist_get_aspect_vmode_ \subfiglist_tmpa_tl :NNNV }
        #1 #2 #3 \subfiglist_tmpb_tl
      
      \fp_set:Nn \subfiglist_tmp_fp #1
      \dim_set:Nn \subfiglist_tmpa_dim #2
      \dim_set:Nn \subfiglist_tmpb_dim #3
    
    \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_canvas_prop
    \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
    \subfiglist_group_var_return:NN \fp_set:Nn \subfiglist_tmp_fp
    \subfiglist_group_var_return:NN \dim_set:Nn \subfiglist_tmpa_dim
    \subfiglist_group_var_return:NN \dim_set:Nn \subfiglist_tmpb_dim
    \group_end:
    \subfiglist_prop_set_from_tl:NN \subfiglist_canvas_prop \subfiglist_tmpa_tl
    
    \subfiglist_is_nan:VF \subfiglist_tmp_fp
    {
      \dim_compare:nNnTF { #2 } < { \subfiglist_tmpa_dim }
      {
        \fp_compare:nNnF { #1 } = { \c_inf_fp }
        {
          \dim_add:Nn #3 { ( \subfiglist_tmpa_dim - #2 ) * \dim_ratio:nn { 1pt } { \fp_to_dim:N #1 } }
        }
        \dim_set_eq:NN #2 \subfiglist_tmpa_dim
      }{
        \dim_add:Nn #3 { #2 * \dim_ratio:nn { 1pt } { \fp_to_dim:N \subfiglist_tmp_fp } }
      }
      \fp_set:Nn #1 { 1 / ( ( 1 / #1 ) + ( 1 / \subfiglist_tmp_fp ) ) }
    }
    \dim_add:NV #3 \subfiglist_tmpb_dim
  }
}

\cs_generate_variant:Nn \subfiglist_get_aspect_hmode_subblock:NNNn { NNNV }

\cs_new:Npn \subfiglist_get_aspect_vmode_line:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Token list with parsed specification string for current line
%
{
  \fp_zero:N  #1
  \dim_zero:N #2
  \dim_zero:N #3
  
  \tl_map_inline:nn { #4 }
  {
    \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
    \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
    \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
    
    \group_begin:
      \subfiglist_use:c { subfiglist_get_aspect_hmode_ \subfiglist_tmpa_tl :NNNV }
        #1 #2 #3 \subfiglist_tmpb_tl
      
      \fp_set:Nn \subfiglist_tmp_fp #1
      \dim_set:Nn \subfiglist_tmpa_dim #2
      \dim_set:Nn \subfiglist_tmpb_dim #3
    
    \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_canvas_prop
    \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
    \subfiglist_group_var_return:NN \fp_set:Nn \subfiglist_tmp_fp
    \subfiglist_group_var_return:NN \dim_set:Nn \subfiglist_tmpa_dim
    \subfiglist_group_var_return:NN \dim_set:Nn \subfiglist_tmpb_dim
    \group_end:
    \subfiglist_prop_set_from_tl:NN \subfiglist_canvas_prop \subfiglist_tmpa_tl
    
    \subfiglist_is_nan:VF \subfiglist_tmp_fp
    {
      \fp_add:NV #1 \subfiglist_tmp_fp
    }
    \dim_add:NV #2 \subfiglist_tmpa_dim
    \subfiglist_is_nan:VF \subfiglist_tmp_fp
    {
      \dim_add:Nf #3 { \subfiglist_tmpb_dim * \dim_ratio:nn { \fp_to_dim:N \subfiglist_tmp_fp } { 1pt } }
    }
  }
  
  \dim_set:Nf #3 { #3 * \dim_ratio:nn { 1pt } { \fp_to_dim:N #1 } }
}

\cs_generate_variant:Nn \subfiglist_get_aspect_vmode_line:NNNn { NNNV }

\cs_new:Npn \subfiglist_get_aspect_vmode_newline:NNNn #1 #2 #3 #4
%
% #1: Floating point variable to store canvas ratio
% #2: Dimension to store horizontal offset
% #3: Dimension to store vertical offset
% #4: Newline specification
%
{
  \fp_set_eq:NN #1 \c_nan_fp
  \dim_zero:N #2
  \dim_set:Nn #3 { #4 }
}

\cs_generate_variant:Nn \subfiglist_get_aspect_vmode_newline:NNNn { NNNV }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Canvas dimesioning   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_dimension_hmode_canvas:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Height of current line
% #3: Canvas specification
%
{
  \subfiglist_prop_get_safe:NnN \subfiglist_canvas_prop { #3 } \subfiglist_tmpa_tl
  \subfiglist_prop_set_from_tl:NN \subfiglist_tmp_prop \subfiglist_tmpa_tl
  
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { ratio } \subfiglist_tmpa_tl
  \fp_set:NV \subfiglist_tmp_fp \subfiglist_tmpa_tl
  
  \dim_set:Nn \subfiglist_tmpa_dim { #2 }
  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { voff } \subfiglist_tmpa_tl
  \dim_sub:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
  \dim_set:Nf \subfiglist_tmpa_dim
    { \subfiglist_tmpa_dim * \dim_ratio:nn { \fp_to_dim:N \subfiglist_tmp_fp } { 1pt } }
  
  \prop_put:Nnn \subfiglist_tmp_prop { height } { #2 }
  \prop_put:NnV \subfiglist_tmp_prop { width } \subfiglist_tmpa_dim
  \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_tmp_prop
  \prop_put:NnV \subfiglist_canvas_prop { #3 } \subfiglist_tmpa_tl
  
  \subfiglist_tl_set_wrapped:Nnn \subfiglist_tmpa_tl { canvas } { #3 }
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_hmode_canvas:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_canvas:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_canvas:Nnn { NVV }


\cs_new:Npn \subfiglist_dimension_hmode_space:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Height of current line
% #3: Space specification
%
{
  \subfiglist_tl_set_wrapped:Nnn \subfiglist_tmpa_tl { space } { #3 }
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_hmode_space:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_space:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_space:Nnn { NVV }


\cs_new:Npn \subfiglist_dimension_hmode_separator:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Height of current line
% #3: Separator specification
%
{
  \subfiglist_tl_set_wrapped:Nnn \subfiglist_tmpa_tl { separator } { #3 }
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_hmode_separator:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_separator:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_separator:Nnn { NVV }


\cs_new:Npn \subfiglist_dimension_hmode_subblock:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Height of current line
% #3: Subblock specification
%
{
  \subfiglist_get_aspect_hmode_subblock:NNNn
    \subfiglist_effective_canvas_ratio_fp
    \subfiglist_effective_hoff_dim
    \subfiglist_effective_voff_dim
    { #3 }
  
  \dim_set:Nn \subfiglist_column_width_dim { #2 }
  \dim_sub:NV \subfiglist_column_width_dim \subfiglist_effective_voff_dim
  \dim_set:Nn \subfiglist_column_width_dim
    { \subfiglist_column_width_dim * \dim_ratio:nn { \fp_to_dim:N \subfiglist_effective_canvas_ratio_fp } { 1pt } }
  \dim_add:NV \subfiglist_column_width_dim \subfiglist_effective_hoff_dim
  
  \group_begin:
    \subfiglist_tl_set_wrapped:NnV #1 { columnwidth } \subfiglist_column_width_dim
    
    \tl_map_inline:nn { #3 }
    {
      \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
      \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
      \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
      
      \subfiglist_use:c { subfiglist_dimension_vmode_ \subfiglist_tmpa_tl :NVV }
        #1 \subfiglist_column_width_dim \subfiglist_tmpb_tl
    }
    
  \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_canvas_prop
  \tl_set_eq:NN \subfiglist_tmpb_tl #1
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpb_tl
  \group_end:
  \subfiglist_prop_set_from_tl:NN \subfiglist_canvas_prop \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpa_tl { subblock } \subfiglist_tmpb_tl
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_hmode_subblock:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_subblock:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_hmode_subblock:Nnn { NVV }


\cs_new:Npn \subfiglist_dimension_vmode_line:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Width of current line
% #3: Token list with parsed specification string for current line
%
{
  \subfiglist_get_aspect_vmode_line:NNNn
    \subfiglist_effective_canvas_ratio_fp
    \subfiglist_effective_hoff_dim
    \subfiglist_effective_voff_dim
    { #3 }
    
  \dim_set:Nn \subfiglist_line_height_dim { #2 }
  \dim_sub:NV \subfiglist_line_height_dim \subfiglist_effective_hoff_dim 
  \dim_set:Nf \subfiglist_line_height_dim
    { \subfiglist_line_height_dim * \dim_ratio:nn { 1pt } { \fp_to_dim:N \subfiglist_effective_canvas_ratio_fp } }
  \dim_add:NV \subfiglist_line_height_dim \subfiglist_effective_voff_dim
  
  \group_begin:
    \subfiglist_tl_set_wrapped:NnV #1 { lineheight } \subfiglist_line_height_dim
      
    \tl_map_inline:nn { #3 }
    {
      \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
      \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
      \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
      
      \subfiglist_use:c { subfiglist_dimension_hmode_ \subfiglist_tmpa_tl :NVV }
        #1 \subfiglist_line_height_dim \subfiglist_tmpb_tl
    }
    
  \subfiglist_tl_set_from_prop:NN \subfiglist_tmpa_tl \subfiglist_canvas_prop
  \tl_set_eq:NN \subfiglist_tmpb_tl #1
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpa_tl
  \subfiglist_group_var_return:NN \tl_set:Nn \subfiglist_tmpb_tl
  \group_end:
  \subfiglist_prop_set_from_tl:NN \subfiglist_canvas_prop \subfiglist_tmpa_tl
  \subfiglist_tl_set_wrapped:NnV \subfiglist_tmpa_tl { line } \subfiglist_tmpb_tl
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_vmode_line:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_vmode_line:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_vmode_line:Nnn { NVV }

\cs_new:Npn \subfiglist_dimension_vmode_newline:Nnn #1 #2 #3
%
% #1: Token list variable for storing dimensioned specification string
% #2: Width of current line
% #3: Token list with parsed specification string for current line
%
{
  \subfiglist_tl_set_wrapped:Nnn \subfiglist_tmpa_tl { newline } { #3 }
  \tl_put_right:NV #1 \subfiglist_tmpa_tl
}

\cs_generate_variant:Nn \subfiglist_dimension_vmode_newline:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_dimension_vmode_newline:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_dimension_vmode_newline:Nnn { NVV }



%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Image loading   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_load_is_svg_p:V #1
%
% #1: Image file extension
%
{
  \str_if_eq_p:nV { pdf_tex } #1
}

\cs_new:Npn \subfiglist_load_is_tex_p:V #1
%
% #1: Image file extension
%
{
  \str_if_eq_p:nV { tex } #1
}

\prg_new_conditional:Npnn \subfiglist_load_is_img:V #1 { p }
%
% #1: Image file extension
%
{
  \prg_return_true:
}

% Command for loading an SVG image split into PDF and text.
\cs_new:Npn \subfiglist_load_svg:Nnn #1 #2 #3
%
% #1: Box variable to store image
% #2: File path
% #3: Image width
%
{
  % Set width of SVG image
  \str_if_eq:nnF { #3 } { ! }
    { \cs_gset:Npn \svgwidth { #3 } }
    
  \hbox_gset:Nn #1
  {
    \begin{subfiglistsvgenv}
      \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `/ } }
      \tl_if_in:nxTF { #2 } { \char_generate:nV { `/ } \subfiglist_tmp_int }
      {
        \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `/ } \subfiglist_tmp_int } { #2 }
        \seq_pop_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
        \import { \seq_use:Nn \subfiglist_tmp_seq { / } / }{ \tl_use:N \subfiglist_tmpa_tl }
      }{
        \input { #2 }
      }
    \end{subfiglistsvgenv}
  }
}

% Command for loading a TeX image
\cs_new:Npn \subfiglist_load_tex:Nnn #1 #2 #3
%
% #1: Box variable to store image
% #2: File path
% #3: Image width
%
{
  % Has natural width been requested?
  \str_if_eq:nnTF { ! } { #3 }
  {
    \hbox_gset:Nn #1
    {
      \subfiglist_load_tex_make_env:n { #2 }
    }
  }{
    \hbox_set:Nn \subfiglist_tmp_box
    {
      \subfiglist_load_tex_make_env:n { #2 }
    }
    \dim_set:Nn \subfiglist_tmpa_dim { \box_wd:N \subfiglist_tmp_box }
    \hbox_gset:Nn #1 { \scalebox { \fp_eval:n { #3 / \subfiglist_tmpa_dim } } { \box_use:N \subfiglist_tmp_box } }
  }
}

% Command for loading a TeX image
\cs_new:Npn \subfiglist_load_tex_make_env:n #1
%
% #1: File path
%
{
  \begin{subfiglisttexenv}
  \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `/ } }
  \tl_if_in:nxTF { #1 } { \char_generate:nV { `/ } \subfiglist_tmp_int }
    {
      \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `/ } \subfiglist_tmp_int } { #1 }
      \seq_pop_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
      \import { \seq_use:Nn \subfiglist_tmp_seq { / } / }{ \tl_use:N \subfiglist_tmpa_tl }
    }{
      \input { #1 }
    }
  \end{subfiglisttexenv}
}

% Command for loading a bitmap image.
\cs_new:Npn \subfiglist_load_img:Nnn #1 #2 #3
%
% #1: Box variable to store image
% #2: File path
% #3: Image width
%
{
  % Has natural width been requested?
  \str_if_eq:nnTF { ! } { #3 }
  {
    % Load with natural width
    \hbox_gset:Nn #1 { \includegraphics { #2 } }
  }{
    % Load with natural width and scale to desired width.
    % This is a workaround to an apparent bug of \includegraphics,
    % which slightly changes the aspect ratio of an image that
    % is loaded with a specific width.
    \hbox_set:Nn \subfiglist_tmp_box { \includegraphics { #2 } }
    \dim_set:Nn \subfiglist_tmpa_dim { \box_wd:N \subfiglist_tmp_box }
    \hbox_gset:Nn #1 { \scalebox { \fp_eval:n { #3 / \subfiglist_tmpa_dim } } { \box_use:N \subfiglist_tmp_box } }
  }
}

%Command for loading an SVG or bitmap image
\cs_new:Npn \subfiglist_load:Nnn #1 #2 #3
%
% #1: Box variable to store image
% #2: File path
% #3: Image width
%
{
  % Strip off path
  \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `/ } }
  \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `/ } \subfiglist_tmp_int } { #2 }
  \seq_get_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
  % Determine file extension.
  \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `. } }
  \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `. } \subfiglist_tmp_int } { #2 }
  \seq_pop_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
  % Set command to load images depending on file extension.
  \seq_if_empty:NTF \subfiglist_tmp_seq
  {
    % There is no file extension, only the file name.
    % Assume bitmap image in this case.
    \subfiglist_load_img:Nnn #1 { #2 } { #3 }
  }{
    % Distinguish between file extensions
    \tl_map_inline:nn { { svg } { tex } { img } }
    {
      \bool_if:nT { \subfiglist_use:c { subfiglist_load_is_ ##1 _p:V } \subfiglist_tmpa_tl }
      {
        \subfiglist_use:c { subfiglist_load_ ##1 :Nnn } #1 { #2 } { #3 }
        \tl_map_break:
      }
    }
  }
}

\cs_generate_variant:Nn \subfiglist_load:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_load:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_load:Nnn { NVV }
\cs_generate_variant:Nn \subfiglist_load:Nnn { cnn }
\cs_generate_variant:Nn \subfiglist_load:Nnn { cnV }
\cs_generate_variant:Nn \subfiglist_load:Nnn { cVn }
\cs_generate_variant:Nn \subfiglist_load:Nnn { cVV }

%Command for restoring an SVG or bitmap image
\cs_new:Npn \subfiglist_restore:Nnn #1 #2 #3
%
% #1: Box variable to store image
% #2: File path
% #3: Image width
%
{
  % Strip off path
  \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `/ } }
  \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `/ } \subfiglist_tmp_int } { #2 }
  \seq_get_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
  % Determine file extension.
  \int_set:Nn \subfiglist_tmp_int { \char_value_catcode:n { `. } }
  \seq_set_split:Nxn \subfiglist_tmp_seq { \char_generate:nV { `. } \subfiglist_tmp_int } { #2 }
  \seq_pop_right:NN \subfiglist_tmp_seq \subfiglist_tmpa_tl
  % Set command to load images depending on file extension.
  \seq_if_empty:NTF \subfiglist_tmp_seq
  {
    % There is no file extension, only the file name.
    % Assume bitmap image in this case.
    \dim_set:Nn \subfiglist_tmpa_dim { \box_wd:N #1 }
    \hbox_gset:Nn #1 { \scalebox { \fp_eval:n { #3 / \subfiglist_tmpa_dim } } { \box_use:N #1 } }
  }{
    \bool_lazy_or:nnTF
    { \subfiglist_load_is_svg_p:V \subfiglist_tmpa_tl }
    { \subfiglist_load_is_tex_p:V \subfiglist_tmpa_tl }
    {
      \subfiglist_load_svg:Nnn #1 { #2 } { #3 }
    }{
      \dim_set:Nn \subfiglist_tmpa_dim { \box_wd:N #1 }
      \hbox_gset:Nn #1 { \scalebox { \fp_eval:n { #3 / \subfiglist_tmpa_dim } } { \box_use:N #1 } }
    }
  }
}

\cs_generate_variant:Nn \subfiglist_restore:Nnn { NnV }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { NVn }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { NVV }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { cnn }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { cnV }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { cVn }
\cs_generate_variant:Nn \subfiglist_restore:Nnn { cVV }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Calculate canvas ratio   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Calculate ratio width/height of specified file
\cs_new:Npn \subfiglist_get_file_ratio:Nnn #1 #2 #3
%
% #1: Floating point variable to store ratio
% #2: Image number
% #3: Image file path
%
{
  \group_begin:
  
    % Store file in a box
    \bool_if:NTF \subfiglist_env_store_images_bool
    {
      \box_if_exist:cF { subfiglist_image_ #2 _box }
      {
        \box_new:c { subfiglist_image_ #2 _box }
      }
      \subfiglist_load:cnn { subfiglist_image_ #2 _box } { #3 } { ! }
      
      % Get box dimensions
      \dim_set:Nn \subfiglist_canvas_height_dim { \box_ht:c { subfiglist_image_ #2 _box } }
      \dim_set:Nn \subfiglist_canvas_width_dim  { \box_wd:c { subfiglist_image_ #2 _box } }
    }{
      \subfiglist_load:Nnn \subfiglist_tmp_box { #3 } { ! }
      
      % Get box dimensions
      \dim_set:Nn \subfiglist_canvas_height_dim { \box_ht:N \subfiglist_tmp_box }
      \dim_set:Nn \subfiglist_canvas_width_dim  { \box_wd:N \subfiglist_tmp_box }
    }
    
    % Store ratio width/height
    \fp_set:Nn \subfiglist_tmp_fp { \subfiglist_canvas_width_dim / \subfiglist_canvas_height_dim }
    \tl_set:Nf #1 { \fp_use:N \subfiglist_tmp_fp }
  
  % Return local variables with group scope
  \subfiglist_group_var_return:NN \tl_set:Nn #1
  \group_end:
}



%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Output macros   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

% Output specified file
\cs_new:Npn \subfiglist_put_file:Nn #1 #2
%
% #1: Property list containing canvas properties
% #2: Canvas number
%
{
  \subfiglist_prop_get_safe:NnN #1 { path } \subfiglist_tmpa_tl
  \subfiglist_prop_get_safe:NnN #1 { width } \subfiglist_tmpb_tl
  \bool_if:NTF \subfiglist_env_store_images_bool
  {
    \subfiglist_restore:cVV { subfiglist_image_ #2 _box } \subfiglist_tmpa_tl \subfiglist_tmpb_tl
    \box_use:c { subfiglist_image_ #2 _box }
  }{
    \subfiglist_load:NVV \subfiglist_tmp_box \subfiglist_tmpa_tl \subfiglist_tmpb_tl
    \box_use:N \subfiglist_tmp_box
  }
}

% Output specified dummy or dummy file
\tl_map_inline:nn { { dummy } { dummyfile } }
{
  \cs_new:cpn { subfiglist_put_ #1 :Nn } ##1 ##2
  %
  % #1: Property list containing canvas properties
  % #2: Canvas number
  %
  {
    \subfiglist_prop_get_safe:NnN ##1 { width } \subfiglist_tmpa_tl
    \subfiglist_prop_get_safe:NnN ##1 { height } \subfiglist_tmpb_tl
    
    \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
    \dim_set:NV \subfiglist_tmpb_dim \subfiglist_tmpb_tl
    
    % Put minipage with size of dummy
    \begin { minipage } [ b ] [ \subfiglist_tmpb_dim ] [ c ] { \subfiglist_tmpa_dim }
      \mbox { }
    \end { minipage }
  }
}

\cs_new:Npn \subfiglist_put_framed_canvas:Nn #1 #2
%
% #1: Property list containing canvas properties
% #2: Canvas number
%
{
  \colorlet { subfiglist_current_color } { . }
  {
    \color { \subfiglist_tmpa_tl }
    \subfiglist_prop_get_safe:NnN #1 { frame-width } \subfiglist_tmpa_tl
    \dim_set:Nn \fboxsep { 0pt }
    \dim_set:Nn \fboxrule { \subfiglist_tmpa_tl }
    \fbox
    {
      \color { subfiglist_current_color }
      \vbox:n
      {
        % Vertical offset
        \subfiglist_prop_get_safe:NnN #1 { frame-top } \subfiglist_tmpa_tl
        \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
        \vspace { \subfiglist_tmpa_dim }
        
        \hbox:n
        {
          % Horizontal offset
          \subfiglist_prop_get_safe:NnN #1 { frame-left } \subfiglist_tmpa_tl
          \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
          \hspace { \subfiglist_tmpa_dim }
          
          \subfiglist_prop_get_safe:NnN #1 { type } \subfiglist_tmpa_tl
          \subfiglist_use:c { subfiglist_put_ \tl_use:N \subfiglist_tmpa_tl :Nn } #1 { #2 }
          
          % Horizontal offset
          \subfiglist_prop_get_safe:NnN #1 { frame-right } \subfiglist_tmpa_tl
          \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
          \hspace { \subfiglist_tmpa_dim }
        }
        
        % Vertical offset
        \subfiglist_prop_get_safe:NnN #1 { frame-bot } \subfiglist_tmpa_tl
        \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
        \vspace { \subfiglist_tmpa_dim }
      }
    }
  }
}

% Output specified canvas
\cs_new:Npn \subfiglist_put_canvas:n #1
%
% #1: Canvas number
%
{
  \subfiglist_prop_get_safe:NnN \subfiglist_canvas_prop { #1 } \subfiglist_tmpa_tl
  \subfiglist_prop_set_from_tl:NN \subfiglist_tmp_prop \subfiglist_tmpa_tl
%  
  % Store canvas in box
  \hbox_set:Nn \subfiglist_tmp_box
  {
    % Vertical offset:
    \vbox:n
    {
      \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { top } \subfiglist_tmpa_tl
      \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
      \vspace { \subfiglist_tmpa_dim }
      % Horizontal offset
      \hbox:n
      {
        \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { left } \subfiglist_tmpa_tl
        \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
        \hspace { \subfiglist_tmpa_dim }
        % Put canvas
        \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { frame-color } \subfiglist_tmpa_tl
        \str_if_eq:nVTF { none } \subfiglist_tmpa_tl
        {
          \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { type } \subfiglist_tmpa_tl
          \subfiglist_use:c { subfiglist_put_ \tl_use:N \subfiglist_tmpa_tl :Nn } \subfiglist_tmp_prop { #1 }
        }{
          \subfiglist_put_framed_canvas:Nn \subfiglist_tmp_prop { #1 }
        }
        % Horizontal offset
        \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { right } \subfiglist_tmpa_tl
        \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
        \hspace { \subfiglist_tmpa_dim }
      }
    % Vertical offset
    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { bot } \subfiglist_tmpa_tl
    \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
    \vspace { \subfiglist_tmpa_dim }
    }
  }
  
  % Get canvas width
  \dim_set:Nn \subfiglist_tmpa_dim { \box_wd:N \subfiglist_tmp_box }
  
  \begin { subfigure } [ b ] { \subfiglist_tmpa_dim }
    \centering
    
    % Place canvas
    \leavevmode \rlap{ \box_use:N \subfiglist_tmp_box }
    
    % Has a label been specified?
    \prop_if_in:NnT \subfiglist_label_prop { #1 }
    {
      \subfiglist_put_label:nnn { #1 } { \box_wd:N \subfiglist_tmp_box } { \box_ht:N \subfiglist_tmp_box }
    }
    
    % Has an overlay been specified?
    \prop_if_in:NnT \subfiglist_overlay_prop { #1 }
    {
      \subfiglist_put_overlay:nnn { #1 } { \box_wd:N \subfiglist_tmp_box } { \box_ht:N \subfiglist_tmp_box }
    }
    
    % Fix spacing
    \phantom { \box_use:N \subfiglist_tmp_box }
  \end { subfigure }
}

\cs_generate_variant:Nn \subfiglist_put_canvas:n { V }

\cs_new:Npn \subfiglist_put_space:n #1
{
  \bool_if:NTF \subfiglist_env_use_hspace_bool
  {
    \hspace * { \dim_use:N \subfiglist_canvas_space_environment_default_dim }
  }{
    \hfill
  }
}

\cs_generate_variant:Nn \subfiglist_put_space:n { V }

\cs_new:Npn \subfiglist_put_lineheight:n #1
%
% #1: Height of current line
%
{
  \dim_set:Nn \subfiglistlineheight { #1 }
}

\cs_generate_variant:Nn \subfiglist_put_lineheight:n { V }

\cs_new:Npn \subfiglist_put_separator:n #1
%
% #1: Content of separator
%
{
  \mbox { #1 }
}

\cs_generate_variant:Nn \subfiglist_put_separator:n { V }

\cs_new:Npn \subfiglist_put_subblock:n #1
%
% #1: Content of subblock
%
{
  \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { #1 }
  \subfiglist_tl_set_tail:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
  \subfiglist_tl_set_head:NV \subfiglist_tmpa_tl \subfiglist_tmpa_tl
  \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
  
  \str_if_eq:nVTF { columnwidth } \subfiglist_tmpa_tl
  {
    \begin{minipage}[b]{\subfiglist_tmpb_tl}
      \tl_map_inline:nn { #1 }
      {
        \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
        \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
        \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
        
        \subfiglist_use:c { subfiglist_put_ \subfiglist_tmpa_tl :V } \subfiglist_tmpb_tl
      }
    \end{minipage}
  }{
    \tl_set:Nn \subfiglist_tmpb_tl { Expected~token~`columnwidth'~but~found~token~` }
    \tl_put_right:NV \subfiglist_tmpb_tl \subfiglist_tmpa_tl
    \tl_put_right:Nn \subfiglist_tmpb_tl { '~instead }
    \msg_error:nnV { subfiglist } { internal~error } \subfiglist_tmpb_tl
  }
}

\cs_generate_variant:Nn \subfiglist_put_subblock:n { V }

\cs_new:Npn \subfiglist_put_columnwidth:n #1
{
  \relax
}

\cs_generate_variant:Nn \subfiglist_put_columnwidth:n { V }

\cs_new:Npn \subfiglist_put_line:n #1
%
% #1: Content of line
%
{
  \tl_map_inline:nn { #1 }
  {
    \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
    \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
    \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
    
    \subfiglist_use:c { subfiglist_put_ \subfiglist_tmpa_tl :V } \subfiglist_tmpb_tl
  }
}

\cs_generate_variant:Nn \subfiglist_put_line:n { V }

\cs_new:Npn \subfiglist_put_newline:n #1
%
% #1: Content of newline
%
{
  \dim_set:Nn \subfiglist_tmpa_dim { #1 }
  \dim_sub:Nn \subfiglist_tmpa_dim \subfiglist_newline_correction_dim
  \\[\subfiglist_tmpa_dim]
}

\cs_generate_variant:Nn \subfiglist_put_newline:n { V }

% Define command for label inset
\cs_new:Npn \subfiglist_put_label:nnn #1 #2 #3
%
% #1: Canvas number
% #2: Canvas width
% #3: Canvas height
%
{
  \subfiglist_prop_get_safe:NnN \subfiglist_label_prop { #1 } \subfiglist_tmpa_tl
  \subfiglist_prop_set_from_tl:NN \subfiglist_tmp_prop \subfiglist_tmpa_tl
  
  % Don't reqire any horizontal space
  \rlap
  {
    % Create minipage of exact image size
    \begin { minipage } [ b ] [ #3 ] [ t ] { #2 }
      % Iterate over all three possible choices for vertical positioning
      \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { vpos } \subfiglist_tmpa_tl
      \int_step_inline:nnnn { \subfiglist_keyval_choice_first_int } { 1 }
        { \subfiglist_keyval_choice_first_int + 2 }
      {
        \strut
        % Is current choice for vertical positioning the selected one?
        \int_compare:nTF { ##1 = \subfiglist_tmpa_tl }
        {
          \strut
          % Iterate over all three possible choices for horizontal positioning
          \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { hpos } \subfiglist_tmpb_tl
          \int_step_inline:nnnn { \subfiglist_keyval_choice_first_int } { 1 }
            { \subfiglist_keyval_choice_first_int + 2 }
          {
            % Is current choce for horizontal positioning the selected one?
            \int_compare:nTF { ####1 = \subfiglist_tmpb_tl }
            {
              \group_begin:
                % Don't reqire any horizontal space for label
                \makebox [ 0pt ] [ l ]
                {
                  % Additional horizontal shift
                  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { xshift } \subfiglist_tmpa_tl
                  \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
                  \hspace{ \subfiglist_tmpa_dim }
                  % Choose left, center or right alignment for label
                  \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { hpos } \subfiglist_tmpa_tl
                  \int_set:Nn \subfiglist_tmp_int
                    { \subfiglist_tmpa_tl - \subfiglist_keyval_choice_first_int + 1 }
                  \makebox [ 0pt ]
                  [
                    \tl_item:nn { lcr } { \subfiglist_tmp_int }
                  ]
                  {
                    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { sequenceno } \subfiglist_tmpa_tl
                    \int_set:Nn \subfiglist_tmp_int { \subfiglist_tmpa_tl }
                    % Additional vertical shift
                    \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { yshift } \subfiglist_tmpa_tl
                    \dim_set:NV \subfiglist_tmpa_dim \subfiglist_tmpa_tl
                    \raisebox { -\subfiglist_tmpa_dim } [ \box_ht:N \strutbox ] [ 0pt ]
                    {
                      \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { background } \subfiglist_tmpa_tl
                      % Decide whether label has to be put inside a colorbox or not
                      \str_if_eq:nVTF { none } \subfiglist_tmpa_tl
                        % Either delete next token or use it as argument of \colorbox
                        \use_none:n \colorbox
                          { \subfiglist_tmpa_tl }
                      {
                        \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { color } \subfiglist_tmpa_tl
                        \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { hook }  \subfiglist_tmpb_tl
                        % Use caption package for putting label?
                        \bool_if:NTF \subfiglist_tweak_caption_package_bool
                        {
                          \subfiglist_label_inset_caption_package:VV \subfiglist_tmpa_tl \subfiglist_tmp_int
                          % Put hook for label
                          \rlap{ \subfiglist_tmpb_tl }
                        }{
                          \hbox:n
                          {
                            \int_compare:nT { \subfiglist_tmp_int > 1 }
                            {
                              \addtocounter { subfigure } { \numexpr -\value { subfigure } }
                              \addtocounter { subfigure } { #2 }
                              \addtocounter { subfigure } { -1 }
                            }
                            \refstepcounter { subfigure }
                            \color { \subfiglist_tmpa_tl }
                            \subfiglistlabelformat
                            % Put hook for label
                            \rlap{ \subfiglist_tmpb_tl }
                          }
                        }
                      }
                    }
                  }
                }
              \group_end:
            }{
              % Put \hfills for horizontal positioning of label
              \hfill
            }
          }
        }{
          % Put \vfills for vertical positioning of label
          \vfill
        }
        \strut
      }
    \end { minipage }
  }
}

% Define command for overlay
\cs_new:Npn \subfiglist_put_overlay:nnn #1 #2 #3
%
% #1: Canvas number
% #2: Image width
% #3: Image height
%
{
  \subfiglist_prop_get_safe:NnN \subfiglist_overlay_prop { #1 } \subfiglist_tmpa_tl
  \subfiglist_prop_set_from_tl:NN \subfiglist_tmp_prop \subfiglist_tmpa_tl
  
  % Don't require any horizontal space
  \rlap
  {
    \begin { subfiglistoverlayenv } { #2 } { #3 }
      % Put content of overlay
      \subfiglist_prop_get_safe:NnN \subfiglist_tmp_prop { content } \subfiglist_tmpa_tl
      \tl_use:N \subfiglist_tmpa_tl
    \end { subfiglistoverlayenv }
  }
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Setup command stubs   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \subfiglist_setup_file_stub:
{
  \msg_error:nnf { subfiglist } { unexpected~command } { \token_to_str:c { subfiglistfile } }
}

\NewDocumentCommand \subfiglistfile { } { \subfiglist_setup_file_stub: }

\cs_new:Npn \subfiglist_setup_dummyfile_stub:
{
  \msg_error:nnn { subfiglist } { unexpected~command } { \token_to_str:c { subfiglistdummyfile } }
}

\NewDocumentCommand \subfiglistdummyfile { } { \subfiglist_setup_dummyfile_stub: }

\cs_new:Npn \subfiglist_setup_dummy_stub:
{
  \msg_error:nnn { subfiglist } { unexpected~command } { \token_to_str:c { subfiglistdummy } }
}

\NewDocumentCommand \subfiglistdummy { } { \subfiglist_setup_dummy_stub: }

\cs_new:Npn \subfiglist_setup_label_stub:
{
  \msg_error:nnn { subfiglist } { unexpected~command } { \token_to_str:c { subfiglistlabel } }
}

\NewDocumentCommand \subfiglistlabel { } { \subfiglist_setup_label_stub: }

\cs_new:Npn \subfiglist_setup_overlay_stub:
{
  \msg_error:nnn { subfiglist } { unexpected~command } { \token_to_str:c { subfiglistoverlay } }
}

\NewDocumentCommand \subfiglistoverlay { } { \subfiglist_setup_overlay_stub: }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%   Document commands   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define command to format label when caption option is not used
\NewDocumentCommand \subfiglistlabelformat { } { (\alph{subfigure}) }


% Define environment to format SVG images
\NewDocumentEnvironment { subfiglistsvgenv } { } { } { }


% Define environment to format TeX images
\NewDocumentEnvironment { subfiglisttexenv } { } { } { }


% Define environment for overlays
\NewDocumentEnvironment { subfiglistoverlayenv } { m m }
%
% #1: Image width
% #2: Image height
%
{
  \group_begin:

  \dim_set:Nn \unitlength { #1 }
  \dim_set:Nn \subfiglist_canvas_width_dim  { #1 }
  \dim_set:Nn \subfiglist_canvas_height_dim { #2 }
  
  \begin { picture } ( 1, \fp_eval:n { \subfiglist_canvas_height_dim / \subfiglist_canvas_width_dim } )
}{
  \end { picture }
  
  \group_end:
}


% Define environment subfiglist
\NewDocumentEnvironment { subfiglist } { s O{ } m }
%
% #1: Optional star
% #2: Optional argument
% #3: Subfiglist specification
%
{
  % Make everything local, so no variables have to be reset:
  \group_begin:
  
  % Setup default options
  \subfiglist_key_set:nnV { subfiglist-environment } { environment-width } \subfiglist_env_width_document_default_dim
  \bool_if:NTF \subfiglist_env_use_hspace_document_default_bool
  {
    \subfiglist_key_set:nnn { subfiglist-environment } { environment-use-hspace } { true }
  }{
    \subfiglist_key_set:nnn { subfiglist-environment } { environment-use-hspace } { false }
  }
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-space }        \subfiglist_canvas_space_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-top }          \subfiglist_canvas_top_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-bottom }       \subfiglist_canvas_bot_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-left }         \subfiglist_canvas_left_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-right }        \subfiglist_canvas_right_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-color }  \subfiglist_canvas_frame_color_document_default_tl
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-width }  \subfiglist_canvas_frame_width_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-top }    \subfiglist_canvas_frame_top_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-bottom } \subfiglist_canvas_frame_bottom_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-left }   \subfiglist_canvas_frame_left_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { canvas-frame-right }  \subfiglist_canvas_frame_right_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { label-hpos }          \subfiglist_label_hpos_document_default_tl
  \subfiglist_key_set:nnV { subfiglist-environment } { label-vpos }          \subfiglist_label_vpos_document_default_tl
  \subfiglist_key_set:nnV { subfiglist-environment } { label-xshift }        \subfiglist_label_xshift_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { label-yshift }        \subfiglist_label_yshift_document_default_dim
  \subfiglist_key_set:nnV { subfiglist-environment } { label-color }         \subfiglist_label_color_document_default_tl
  \subfiglist_key_set:nnV { subfiglist-environment } { label-background }    \subfiglist_label_background_document_default_tl

  \keys_set:nn { subfiglist-environment } { #2 }
  
  % Check for starred environment
  \IfBooleanTF #1
  {
    \bool_set_true:N \subfiglist_env_store_images_bool
  }{
    \bool_set_false:N \subfiglist_env_store_images_bool
  }
  
  % Tokenize subfiglist specification
  \subfiglist_seq_set_from_tl:Nn \subfiglist_spec_str_seq { #3 }
  \seq_clear:N \subfiglist_identifier_nums_seq
  \tl_clear:N \subfiglist_tokenized_spec_tl
  \subfiglist_tokenize_spec_str:NNN \subfiglist_tokenized_spec_tl \subfiglist_identifier_nums_seq \subfiglist_spec_str_seq
  
  % Verify identifier numbers
  \subfiglist_verify_identifier_nums:NNN
    \subfiglist_identifier_nums_seq
    \subfiglist_identifier_nums_sorted_seq
    \subfiglist_identifier_count_int
    
  % Parse subfiglist specification
  \subfiglist_parse_spec_tokens:NV \subfiglist_parsed_spec_tl \subfiglist_tokenized_spec_tl
  
  \prop_clear:N \subfiglist_canvas_prop
  
  % Calculate correction for height of newline
  \vbox_set:Nn \subfiglist_tmp_box
  {
    \rule{2em}{2em}\\[0pt]\rule{2em}{2em}
  }  
  \dim_set:Nn \subfiglist_newline_correction_dim 
    { \box_ht:N \subfiglist_tmp_box - 4em }
  
  % Setup commands
  \RenewDocumentCommand \subfiglistfile { O{} m m }
    { \subfiglist_setup_file:nnn { ##1 } { ##2 } { ##3 } }
  \RenewDocumentCommand \subfiglistdummyfile { O{} m m }
    { \subfiglist_setup_dummyfile:nnn { ##1 } { ##2 } { ##3 } }
  \RenewDocumentCommand \subfiglistdummy { O{} m m }
    { \subfiglist_setup_dummy:nnn { ##1 } { ##2 } { ##3 } }
  \RenewDocumentCommand \subfiglistlabel { O{} m m }
    { \subfiglist_setup_label:nnn { ##1 } { ##2 } { ##3 } }
  \RenewDocumentCommand \subfiglistoverlay { m m }
    { \subfiglist_setup_overlay:nn { ##1 } { ##2 } }
}{
  % Verify canvas numbers
  \subfiglist_verify_canvas_nums:NNNV
    \subfiglist_identifier_nums_seq
    \subfiglist_canvas_nums_seq
    \subifglist_canvas_nums_sorted_seq
    \subfiglist_identifier_count_int
  
  % Verify label numbers
  \subfiglist_verify_label_nums:NNNV
    \subfiglist_identifier_nums_seq
    \subfiglist_label_nums_seq
    \subifglist_label_nums_sorted_seq
    \subfiglist_identifier_count_int

  % Verify overlay numbers
  \subfiglist_verify_overlay_nums:NNNV
    \subfiglist_identifier_nums_seq
    \subfiglist_overlay_nums_seq
    \subifglist_overlay_nums_sorted_seq
    \subfiglist_identifier_count_int
  
  % Iterate over top level elements to build
  % dimensioned subfiglist string
  \tl_map_inline:Nn \subfiglist_parsed_spec_tl
  {
    \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
    \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
    \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
    
    \subfiglist_use:c { subfiglist_dimension_vmode_ \subfiglist_tmpa_tl :NVV }
      \subfiglist_dimensioned_spec_tl \subfiglist_env_width_dim \subfiglist_tmpb_tl
  }
  
  % Put everything inside a minipage
  \begin{minipage}{\subfiglist_env_width_dim}
    % Iterate over top level elements to produce output
    \tl_map_inline:Nn \subfiglist_dimensioned_spec_tl
    {
      \subfiglist_tl_set_head:Nn \subfiglist_tmpa_tl { ##1 }
      \subfiglist_tl_set_tail:Nn \subfiglist_tmpb_tl { ##1 }
      \subfiglist_tl_set_unwrapped:NV \subfiglist_tmpb_tl \subfiglist_tmpb_tl
      
      \subfiglist_use:c { subfiglist_put_ \subfiglist_tmpa_tl :V } \subfiglist_tmpb_tl
    }
  \end{minipage}
  
  % Discard commands
  \RenewDocumentCommand \subfiglistfile {} { \subfiglist_setup_file_stub: }
  \RenewDocumentCommand \subfiglistdummyfile {} { \subfiglist_setup_dummyfile_stub: }
  \RenewDocumentCommand \subfiglistdummy {} { \subfiglist_setup_dummy_stub: }
  \RenewDocumentCommand \subfiglistlabel {} { \subfiglist_setup_label_stub: }
  \RenewDocumentCommand \subfiglistoverlay {} { \subfiglist_setup_overlay_stub: }
  
  % Close group
  \group_end:
}

\NewDocumentEnvironment { subfiglist* } { s O{ } m }
  { \begin{subfiglist}*[#2]{#3} }
  { \end{subfiglist} }

\endinput
